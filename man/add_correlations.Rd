% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/grid-pipeline.R
\name{add_correlations}
\alias{add_correlations}
\title{Add correlations from the {correlation} package in {easystats}}
\usage{
add_correlations(
  .df,
  var_set,
  variables,
  focus_set = NULL,
  method = "auto",
  redundant = TRUE,
  add_matrix = TRUE
)
}
\arguments{
\item{.df}{the original data.frame (e.g., base data set). If part of set of
add_* decision functions in a pipeline, the base data will be passed along
as an attribute.}

\item{var_set}{character string. Should be a descriptive name of the
correlation matrix.}

\item{variables}{the variables for which you would like to correlations.
These variables will be passed to \code{link[corrr]{correlate}}. You can
also use tidyselect to select variables.}

\item{method}{character string indicating the correlation method used in
\code{link[corrr]{correlate}}. The default is "peasron".}

\item{focus}{the any variables for which you would like to run
\code{link[corrr]{focus}}.}

\item{stretch}{logical. Whether or not you would like to add a long form
correlation list computed by \code{link[corrr]{stretch}}.}

\item{pair_ns}{logical. Whether or not you would like to add sample sizes
table for each correlation computed by \code{link[corrr]{pair_n}}.}

\item{use}{an optional character string indicating how to handle missing
values. Should be one of "everything", "all.obs", "complete.obs",
"na.or.complete", or "pairwise.complete.obs".}
}
\value{
a data.frame with three columns: type, group, and code. Type
indicates the decision type, group is a decision, and the code is the
actual code that will be executed. If part of a pipe, the current set of
decisions will be appended as new rows.
}
\description{
Add correlations from the {correlation} package in {easystats}
}
\examples{
library(tidyverse)
library(multitool)

the_data <-
  data.frame(
    id   = 1:500,
    iv1  = rnorm(500),
    iv2  = rnorm(500),
    iv3  = rnorm(500),
    mod1 = rnorm(500),
    mod2 = rnorm(500),
    mod3 = rnorm(500),
    cov1 = rnorm(500),
    cov2 = rnorm(500),
    dv1  = rnorm(500),
    dv2  = rnorm(500),
    include1 = rbinom(500, size = 1, prob = .1),
    include2 = sample(1:3, size = 500, replace = TRUE),
    include3 = rnorm(500)
  )

the_data |>
  add_variables("ivs", iv1, iv2, iv3) |>
  add_variables("dvs", dv1, dv2) |>
  add_variables("mods", starts_with("mod")) |>
  add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>
  add_preprocess(process_name = "scale_iv", 'mutate({ivs} = scale({ivs}))') |>
  add_preprocess(process_name = "scale_mod", mutate({mods} := scale({mods}))) |>
  add_model(lm({dvs} ~ {ivs} * {mods})) |>
  add_model(lm({dvs} ~ {ivs} * {mods} + cov1)) |>
  add_postprocess("aov", aov()) |>
  add_summary_stats("iv_stats", starts_with("iv"), c("mean", "sd")) |>
  add_summary_stats("dv_stats", starts_with("dv"), c("skewness", "kurtosis")) |>
  add_correlations("predictors", matches("iv|mod|cov"), focus = c(cov1,cov2)) |>
  add_correlations("outcomes", matches("dv"))
}
