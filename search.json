[{"path":"https://ethan-young.github.io/multitool/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 multitool authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ethan-young.github.io/multitool/articles/create-your-blueprint.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Defining an Analysis Pipeline Blueprint","text":"First things first. multitool leverages tidyverse package lets load :","code":"library(tidyverse) library(multitool)"},{"path":"https://ethan-young.github.io/multitool/articles/create-your-blueprint.html","id":"setting-up-a-data-analysis-pipeline","dir":"Articles","previous_headings":"","what":"Setting up a data analysis pipeline","title":"Defining an Analysis Pipeline Blueprint","text":"Image data several predictor variables, moderators, covariates, dependent measures. want know predictors (ivs) interact moderators (mods) predict outcome (dvs). three versions predictor (supposedly) measure thing, albeit slightly different ways. addition, collected messy data real world (really let’s pretend), idea observations include might exclude (e.g., include1, include2, include3).","code":"the_data <-   data.frame(     id  = 1:500,     iv1 = rnorm(500),     iv2 = rnorm(500),     iv3 = rnorm(500),     mod = rnorm(500),     dv1 = rnorm(500),     dv2 = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )"},{"path":"https://ethan-young.github.io/multitool/articles/create-your-blueprint.html","id":"create-a-blueprint","dir":"Articles","previous_headings":"","what":"Create a blueprint","title":"Defining an Analysis Pipeline Blueprint","text":"Say don’t know much new exciting area research. want maximize knowledge also want systematic. One approach specify reasonable analysis pipeline. Something looks like following: valid alternative alternatives pipeline? example, using iv2 instead iv1 using two exclusion criteria instead three? sensible approach copy code , paste , edit different decisions. quickly become tedious. adds many lines code, many new objects, difficult keep track systematic way. Enter multitool. multitool, analysis pipeline can transformed specification blueprint exploring combinations sensible data decisions pipeline. designed leverage already written code (e.g., filter statement ) create possible combinations data analysis pipelines.","code":"# Filter out exclusions filtered_data <-    the_data |>    filter(     include1 == 0,           # --     include2 != 3,           # Exclusion criteria     as.numeric(scale(include3)) > -2.5   # --   )  # Model the data my_model <- lm(dv1 ~ iv1 * mod, data = filtered_data)  # Check the results my_results <- parameters::parameters(my_model)"},{"path":"https://ethan-young.github.io/multitool/articles/create-your-blueprint.html","id":"filtering-specifications","dir":"Articles","previous_headings":"","what":"Filtering specifications","title":"Defining an Analysis Pipeline Blueprint","text":"example three exclusion criteria. don’t know important, example, based arbitrary ‘rules thumb’ (may may inherent wisdom) don’t know including/excluding cases valid, can generate combinations: output simple tibble (.e., data.frame) containing three columns. row possible filter: type column refers type blueprint specification (see types filters), group refers variable base data frame (case the_data) filter applies, code column contains code needed execute filter. filtering decisions (e.g., exclusion criteria), ‘nothing’ alternative always generated. example, perhaps observations belong subgroup, include1 == 1. may may good reason exclude cases (depends specific situation). imagine don’t know include . include1 == 1 added add_filters(), ‘nothing’ alternative include1 %% unique(include1) automatically generated can compare including versus excluding cases based criterion.","code":"the_data |>    add_filters(include1 == 0, include2 != 3, scale(include3) > -2.5) #> # A tibble: 6 × 3 #>   type    group    code                           #>   <chr>   <chr>    <chr>                          #> 1 filters include1 include1 == 0                  #> 2 filters include1 include1 %in% unique(include1) #> 3 filters include2 include2 != 3                  #> 4 filters include2 include2 %in% unique(include2) #> 5 filters include3 scale(include3) > -2.5         #> 6 filters include3 include3 %in% unique(include3)"},{"path":"https://ethan-young.github.io/multitool/articles/create-your-blueprint.html","id":"adding-alternative-analysis-variables","dir":"Articles","previous_headings":"","what":"Adding alternative analysis variables","title":"Defining an Analysis Pipeline Blueprint","text":"multiverse-style analyses explore range exclusion criteria alternatives. However, sometimes alternative versions variable also included. social sciences, fairly common many measures roughly construct (.e., measured variable). example, happiness researcher might measure positive mood, life satisfaction, /single item measuring happiness (e.g., ‘happy feel?’). want explore output pipeline differing versions variable, can use add_variables(). output generates tibble add_filters(). row particular decision use particular variable pipeline. contrast filter, however, need tell add_variables() call set variables var_group argument. multitool knows variable name code column different alternative larger set. , var_group = \"ivs\" indicates iv1, iv2, iv3 different versions ivs. used “ivs” way indicating alternative versions main independent variable. can add many variable sets want. example, might also want analyze two versions outcome, dv1 dv2.","code":"the_data |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) #> # A tibble: 3 × 3 #>   type      group code  #>   <chr>     <chr> <chr> #> 1 variables ivs   iv1   #> 2 variables ivs   iv2   #> 3 variables ivs   iv3 the_data |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>    add_variables(var_group = \"dvs\", dv1, dv2) #> # A tibble: 5 × 3 #>   type      group code  #>   <chr>     <chr> <chr> #> 1 variables ivs   iv1   #> 2 variables ivs   iv2   #> 3 variables ivs   iv3   #> 4 variables dvs   dv1   #> 5 variables dvs   dv2"},{"path":"https://ethan-young.github.io/multitool/articles/create-your-blueprint.html","id":"building-up-the-blueprint","dir":"Articles","previous_headings":"","what":"Building up the blueprint","title":"Defining an Analysis Pipeline Blueprint","text":"can harness real power multitool piping specification statements. example, perhaps want explore exclusion criteria alternatives across different versions predictor outcome variables. can simply pipe new blueprint specifications like : Notice now specification blueprint exclusion alternatives variable alternatives.","code":"the_data |>   add_filters(include1 == 0, include2 != 3, scale(include3) > -2.5) |>    add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>    add_variables(var_group = \"dvs\", dv1, dv2) #> # A tibble: 11 × 3 #>    type      group    code                           #>    <chr>     <chr>    <chr>                          #>  1 filters   include1 include1 == 0                  #>  2 filters   include1 include1 %in% unique(include1) #>  3 filters   include2 include2 != 3                  #>  4 filters   include2 include2 %in% unique(include2) #>  5 filters   include3 scale(include3) > -2.5         #>  6 filters   include3 include3 %in% unique(include3) #>  7 variables ivs      iv1                            #>  8 variables ivs      iv2                            #>  9 variables ivs      iv3                            #> 10 variables dvs      dv1                            #> 11 variables dvs      dv2"},{"path":"https://ethan-young.github.io/multitool/articles/create-your-blueprint.html","id":"adding-a-model","dir":"Articles","previous_headings":"","what":"Adding a model","title":"Defining an Analysis Pipeline Blueprint","text":"whole point building specification blueprint eventually feed model examine results. can add model blueprint using add_model(). designed add_model() user can simply paste model function. example, call lm() can simply pasted add_model(). Make sure give model label model_desc argument. , model completely unquoted. also data argument. intentional; multitool tracking base dataset along way (don’t ). Note can still quote model formula, style. make sure add_variables() works properly, add_model() designed interpret glue::glue() syntax. example: allows multitool insert correct version variable specified add_variables() step. Make sure use embrace variable var_group argument add_variables(), example add_model(lm({dvs} ~ {ivs} * mod)). , {dvs} ivs tells multitool insert current version ivs dvs model.","code":"the_data |>   add_filters(include1 == 0, include2 != 3, scale(include3) > -2.5) |>    add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>    add_variables(var_group = \"dvs\", dv1, dv2) |>    add_model(\"linear model\", lm(dv1 ~ iv1 * mod)) #> # A tibble: 12 × 3 #>    type      group        code                           #>    <chr>     <chr>        <chr>                          #>  1 filters   include1     include1 == 0                  #>  2 filters   include1     include1 %in% unique(include1) #>  3 filters   include2     include2 != 3                  #>  4 filters   include2     include2 %in% unique(include2) #>  5 filters   include3     scale(include3) > -2.5         #>  6 filters   include3     include3 %in% unique(include3) #>  7 variables ivs          iv1                            #>  8 variables ivs          iv2                            #>  9 variables ivs          iv3                            #> 10 variables dvs          dv1                            #> 11 variables dvs          dv2                            #> 12 models    linear model lm(dv1 ~ iv1 * mod) the_data |>   add_filters(include1 == 0, include2 != 3, scale(include3) > -2.5) |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>    add_variables(var_group = \"dvs\", dv1, dv2) |>    add_model(\"linear model\", \"lm(dv1 ~ iv1 * mod)\") #> # A tibble: 12 × 3 #>    type      group        code                           #>    <chr>     <chr>        <chr>                          #>  1 filters   include1     include1 == 0                  #>  2 filters   include1     include1 %in% unique(include1) #>  3 filters   include2     include2 != 3                  #>  4 filters   include2     include2 %in% unique(include2) #>  5 filters   include3     scale(include3) > -2.5         #>  6 filters   include3     include3 %in% unique(include3) #>  7 variables ivs          iv1                            #>  8 variables ivs          iv2                            #>  9 variables ivs          iv3                            #> 10 variables dvs          dv1                            #> 11 variables dvs          dv2                            #> 12 models    linear model lm(dv1 ~ iv1 * mod) the_data |>   add_filters(include1 == 0, include2 != 3, scale(include3) > -2.5) |>    add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>    add_variables(var_group = \"dvs\", dv1, dv2) |>    add_model(\"linear model\", lm({dvs} ~ {ivs} * mod)) # see the {} here #> # A tibble: 12 × 3 #>    type      group        code                           #>    <chr>     <chr>        <chr>                          #>  1 filters   include1     include1 == 0                  #>  2 filters   include1     include1 %in% unique(include1) #>  3 filters   include2     include2 != 3                  #>  4 filters   include2     include2 %in% unique(include2) #>  5 filters   include3     scale(include3) > -2.5         #>  6 filters   include3     include3 %in% unique(include3) #>  7 variables ivs          iv1                            #>  8 variables ivs          iv2                            #>  9 variables ivs          iv3                            #> 10 variables dvs          dv1                            #> 11 variables dvs          dv2                            #> 12 models    linear model lm({dvs} ~ {ivs} * mod)"},{"path":"https://ethan-young.github.io/multitool/articles/create-your-blueprint.html","id":"finalizing-the-specification-blueprint","dir":"Articles","previous_headings":"","what":"Finalizing the specification blueprint","title":"Defining an Analysis Pipeline Blueprint","text":"two steps finalizing blueprint. first visualize pipeline graph. optional, think helpful. can automate making chart create_blueprint_graph(). Feed pipeline create_blueprint_graph() see chart multiverse pipeline plan: final step making blueprint expanding specifications possible combinations. can calling expand_decisions() end blueprint pipeline: result expanded tibble 1 row per unique decision columns major blueprint category. example, alternative variables (predictors outcomes), filters (three exclusion alternatives), model run. Note 3 exclusions (two combinations), 3 versions predictor, 2 versions outcome. means blueprint 2*2*2*3*2 r22232` rows, corresponds expanded pipeline: blueprint uses list columns organize information. can view list column using tidyr::unnest(<column name>). example, can look filters: look models: Notice , glue::glue() syntax, different versions predictors outcomes inserted appropriately. can check correspondence using unnest() models variable list columns:","code":"full_pipeline <-    the_data |>   add_filters(include1 == 0, include2 != 3, scale(include3) > -2.5) |>    add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>    add_variables(var_group = \"dvs\", dv1, dv2) |>    add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  create_blueprint_graph(full_pipeline) #> no descriptives #> you have no preprocessing steps in your pipeline #> you have no post processing steps in your pipeline expanded_pipeline <- expand_decisions(full_pipeline)  expanded_pipeline #> # A tibble: 48 × 4 #>    decision variables        filters          models           #>    <chr>    <list>           <list>           <list>           #>  1 1        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  2 2        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  3 3        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  4 4        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  5 5        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  6 6        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  7 7        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  8 8        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  9 9        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #> 10 10       <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #> # ℹ 38 more rows 2*2*2*3*2 == nrow(expanded_pipeline) #> [1] TRUE expanded_pipeline |> unnest(filters) #> # A tibble: 48 × 6 #>    decision variables        include1      include2      include3       models   #>    <chr>    <list>           <chr>         <chr>         <chr>          <list>   #>  1 1        <tibble [1 × 2]> include1 == 0 include2 != 3 scale(include… <tibble> #>  2 2        <tibble [1 × 2]> include1 == 0 include2 != 3 scale(include… <tibble> #>  3 3        <tibble [1 × 2]> include1 == 0 include2 != 3 scale(include… <tibble> #>  4 4        <tibble [1 × 2]> include1 == 0 include2 != 3 scale(include… <tibble> #>  5 5        <tibble [1 × 2]> include1 == 0 include2 != 3 scale(include… <tibble> #>  6 6        <tibble [1 × 2]> include1 == 0 include2 != 3 scale(include… <tibble> #>  7 7        <tibble [1 × 2]> include1 == 0 include2 != 3 include3 %in%… <tibble> #>  8 8        <tibble [1 × 2]> include1 == 0 include2 != 3 include3 %in%… <tibble> #>  9 9        <tibble [1 × 2]> include1 == 0 include2 != 3 include3 %in%… <tibble> #> 10 10       <tibble [1 × 2]> include1 == 0 include2 != 3 include3 %in%… <tibble> #> # ℹ 38 more rows expanded_pipeline |> unnest(models) #> # A tibble: 48 × 5 #>    decision variables        filters          model               model_meta   #>    <chr>    <list>           <list>           <chr>               <chr>        #>  1 1        <tibble [1 × 2]> <tibble [1 × 3]> lm(dv1 ~ iv1 * mod) linear model #>  2 2        <tibble [1 × 2]> <tibble [1 × 3]> lm(dv2 ~ iv1 * mod) linear model #>  3 3        <tibble [1 × 2]> <tibble [1 × 3]> lm(dv1 ~ iv2 * mod) linear model #>  4 4        <tibble [1 × 2]> <tibble [1 × 3]> lm(dv2 ~ iv2 * mod) linear model #>  5 5        <tibble [1 × 2]> <tibble [1 × 3]> lm(dv1 ~ iv3 * mod) linear model #>  6 6        <tibble [1 × 2]> <tibble [1 × 3]> lm(dv2 ~ iv3 * mod) linear model #>  7 7        <tibble [1 × 2]> <tibble [1 × 3]> lm(dv1 ~ iv1 * mod) linear model #>  8 8        <tibble [1 × 2]> <tibble [1 × 3]> lm(dv2 ~ iv1 * mod) linear model #>  9 9        <tibble [1 × 2]> <tibble [1 × 3]> lm(dv1 ~ iv2 * mod) linear model #> 10 10       <tibble [1 × 2]> <tibble [1 × 3]> lm(dv2 ~ iv2 * mod) linear model #> # ℹ 38 more rows expanded_pipeline |> unnest(c(variables, models)) #> # A tibble: 48 × 6 #>    decision ivs   dvs   filters          model               model_meta   #>    <chr>    <chr> <chr> <list>           <chr>               <chr>        #>  1 1        iv1   dv1   <tibble [1 × 3]> lm(dv1 ~ iv1 * mod) linear model #>  2 2        iv1   dv2   <tibble [1 × 3]> lm(dv2 ~ iv1 * mod) linear model #>  3 3        iv2   dv1   <tibble [1 × 3]> lm(dv1 ~ iv2 * mod) linear model #>  4 4        iv2   dv2   <tibble [1 × 3]> lm(dv2 ~ iv2 * mod) linear model #>  5 5        iv3   dv1   <tibble [1 × 3]> lm(dv1 ~ iv3 * mod) linear model #>  6 6        iv3   dv2   <tibble [1 × 3]> lm(dv2 ~ iv3 * mod) linear model #>  7 7        iv1   dv1   <tibble [1 × 3]> lm(dv1 ~ iv1 * mod) linear model #>  8 8        iv1   dv2   <tibble [1 × 3]> lm(dv2 ~ iv1 * mod) linear model #>  9 9        iv2   dv1   <tibble [1 × 3]> lm(dv1 ~ iv2 * mod) linear model #> 10 10       iv2   dv2   <tibble [1 × 3]> lm(dv2 ~ iv2 * mod) linear model #> # ℹ 38 more rows"},{"path":"https://ethan-young.github.io/multitool/articles/create-your-blueprint.html","id":"going-further","dir":"Articles","previous_headings":"","what":"Going further","title":"Defining an Analysis Pipeline Blueprint","text":"example uses relatively simple pipeline steps. can also add sophisticated steps pipeline, preprocessing data, post-processing model results, calculating descriptive statistics alongside model.","code":""},{"path":"https://ethan-young.github.io/multitool/articles/run-your-pipeline.html","id":"unpacking-a-multiverse-analysis","dir":"Articles","previous_headings":"","what":"Unpacking a multiverse analysis","title":"Run your Pipeline","text":"two main ways unpack examine multitool results. first using tidyr::unnest().","code":""},{"path":"https://ethan-young.github.io/multitool/articles/run-your-pipeline.html","id":"unnest","dir":"Articles","previous_headings":"Unpacking a multiverse analysis","what":"Unnest","title":"Run your Pipeline","text":"Inside model_fitted column, multitool gives us 4 columns: model_parameters, model_performance, model_warnings, model_messages. model_parameters column gives result calling parameters::parameters() model grid, data.frame model coefficients associated standard errors, confidence intervals, test statistic, p-values. model_performance column gives fit statistics, r2 AIC BIC values, computed running performance::performance() model grid. model_messages model_warnings columns contain information provided modeling function. something went wrong need know something particular model, columns captured messages warnings printed modeling function.","code":"multiverse_results |> unnest(model_fitted) #> # A tibble: 48 × 8 #>    decision specifications   model_function model_parameters   model_performance #>    <chr>    <list>           <chr>          <list>             <list>            #>  1 1        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  2 2        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  3 3        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  4 4        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  5 5        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  6 6        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  7 7        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  8 8        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  9 9        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #> 10 10       <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #> # ℹ 38 more rows #> # ℹ 3 more variables: model_warnings <list>, model_messages <list>, #> #   pipeline_code <list> multiverse_results |>    unnest(model_fitted) |>    unnest(model_parameters) #> # A tibble: 192 × 16 #>    decision specifications   model_function parameter   coefficient     se    ci #>    <chr>    <list>           <chr>          <chr>             <dbl>  <dbl> <dbl> #>  1 1        <tibble [1 × 3]> lm             (Intercept)    -0.00937 0.0655  0.95 #>  2 1        <tibble [1 × 3]> lm             iv1             0.114   0.0659  0.95 #>  3 1        <tibble [1 × 3]> lm             mod            -0.0519  0.0606  0.95 #>  4 1        <tibble [1 × 3]> lm             iv1:mod        -0.0870  0.0583  0.95 #>  5 2        <tibble [1 × 3]> lm             (Intercept)    -0.0302  0.0662  0.95 #>  6 2        <tibble [1 × 3]> lm             iv1            -0.0109  0.0666  0.95 #>  7 2        <tibble [1 × 3]> lm             mod             0.00266 0.0612  0.95 #>  8 2        <tibble [1 × 3]> lm             iv1:mod        -0.108   0.0589  0.95 #>  9 3        <tibble [1 × 3]> lm             (Intercept)    -0.0202  0.0664  0.95 #> 10 3        <tibble [1 × 3]> lm             iv2            -0.0632  0.0708  0.95 #> # ℹ 182 more rows #> # ℹ 9 more variables: ci_low <dbl>, ci_high <dbl>, t <dbl>, df_error <int>, #> #   p <dbl>, model_performance <list>, model_warnings <list>, #> #   model_messages <list>, pipeline_code <list> multiverse_results |>    unnest(model_fitted) |>   unnest(model_performance) #> # A tibble: 48 × 14 #>    decision specifications   model_function model_parameters     aic  aicc   bic #>    <chr>    <list>           <chr>          <list>             <dbl> <dbl> <dbl> #>  1 1        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  858.  859.  877. #>  2 2        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  864.  865.  883. #>  3 3        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  864.  864.  882. #>  4 4        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  867.  867.  885. #>  5 5        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  865.  865.  883. #>  6 6        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  867.  867.  885. #>  7 7        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  863.  863.  881. #>  8 8        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  869.  869.  887. #>  9 9        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  868.  868.  886. #> 10 10       <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  871.  872.  890. #> # ℹ 38 more rows #> # ℹ 7 more variables: r2 <dbl>, r2_adjusted <dbl>, rmse <dbl>, sigma <dbl>, #> #   model_warnings <list>, model_messages <list>, pipeline_code <list>"},{"path":"https://ethan-young.github.io/multitool/articles/run-your-pipeline.html","id":"reveal","dir":"Articles","previous_headings":"Unpacking a multiverse analysis","what":"Reveal","title":"Run your Pipeline","text":"wrote wrappers around tidyr::unnest() workflow. main function reveal(). Pass multiverse results object reveal() tell columns grab indicating column name .argument: want get straight specific result can specify sub-list .argument:","code":"multiverse_results |>    reveal(.what = model_fitted) #> # A tibble: 48 × 8 #>    decision specifications   model_function model_parameters   model_performance #>    <chr>    <list>           <chr>          <list>             <list>            #>  1 1        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  2 2        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  3 3        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  4 4        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  5 5        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  6 6        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  7 7        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  8 8        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #>  9 9        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #> 10 10       <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]> <prfrmnc_>        #> # ℹ 38 more rows #> # ℹ 3 more variables: model_warnings <list>, model_messages <list>, #> #   pipeline_code <list> multiverse_results |>    reveal(.what = model_fitted, .which = model_parameters) #> # A tibble: 192 × 16 #>    decision specifications   model_function parameter   coefficient     se    ci #>    <chr>    <list>           <chr>          <chr>             <dbl>  <dbl> <dbl> #>  1 1        <tibble [1 × 3]> lm             (Intercept)    -0.00937 0.0655  0.95 #>  2 1        <tibble [1 × 3]> lm             iv1             0.114   0.0659  0.95 #>  3 1        <tibble [1 × 3]> lm             mod            -0.0519  0.0606  0.95 #>  4 1        <tibble [1 × 3]> lm             iv1:mod        -0.0870  0.0583  0.95 #>  5 2        <tibble [1 × 3]> lm             (Intercept)    -0.0302  0.0662  0.95 #>  6 2        <tibble [1 × 3]> lm             iv1            -0.0109  0.0666  0.95 #>  7 2        <tibble [1 × 3]> lm             mod             0.00266 0.0612  0.95 #>  8 2        <tibble [1 × 3]> lm             iv1:mod        -0.108   0.0589  0.95 #>  9 3        <tibble [1 × 3]> lm             (Intercept)    -0.0202  0.0664  0.95 #> 10 3        <tibble [1 × 3]> lm             iv2            -0.0632  0.0708  0.95 #> # ℹ 182 more rows #> # ℹ 9 more variables: ci_low <dbl>, ci_high <dbl>, t <dbl>, df_error <int>, #> #   p <dbl>, model_performance <list>, model_warnings <list>, #> #   model_messages <list>, pipeline_code <list>"},{"path":"https://ethan-young.github.io/multitool/articles/run-your-pipeline.html","id":"reveal_model_","dir":"Articles","previous_headings":"Unpacking a multiverse analysis","what":"reveal_model_*","title":"Run your Pipeline","text":"multitool run save anything put pipeline often, want look model parameters /performance. end, set convenience functions getting common multiverse results: reveal_model_parameters, reveal_model_performance, reveal_model_messages, reveal_model_warnings. reveal_model_parameters unpacks model parameters multiverse: reveal_model_performance unpacks model performance:","code":"multiverse_results |>    reveal_model_parameters() #> # A tibble: 192 × 16 #>    decision specifications   model_function parameter   coefficient     se    ci #>    <chr>    <list>           <chr>          <chr>             <dbl>  <dbl> <dbl> #>  1 1        <tibble [1 × 3]> lm             (Intercept)    -0.00937 0.0655  0.95 #>  2 1        <tibble [1 × 3]> lm             iv1             0.114   0.0659  0.95 #>  3 1        <tibble [1 × 3]> lm             mod            -0.0519  0.0606  0.95 #>  4 1        <tibble [1 × 3]> lm             iv1:mod        -0.0870  0.0583  0.95 #>  5 2        <tibble [1 × 3]> lm             (Intercept)    -0.0302  0.0662  0.95 #>  6 2        <tibble [1 × 3]> lm             iv1            -0.0109  0.0666  0.95 #>  7 2        <tibble [1 × 3]> lm             mod             0.00266 0.0612  0.95 #>  8 2        <tibble [1 × 3]> lm             iv1:mod        -0.108   0.0589  0.95 #>  9 3        <tibble [1 × 3]> lm             (Intercept)    -0.0202  0.0664  0.95 #> 10 3        <tibble [1 × 3]> lm             iv2            -0.0632  0.0708  0.95 #> # ℹ 182 more rows #> # ℹ 9 more variables: ci_low <dbl>, ci_high <dbl>, t <dbl>, df_error <int>, #> #   p <dbl>, model_performance <list>, model_warnings <list>, #> #   model_messages <list>, pipeline_code <list> multiverse_results |>    reveal_model_performance() #> # A tibble: 48 × 14 #>    decision specifications   model_function model_parameters     aic  aicc   bic #>    <chr>    <list>           <chr>          <list>             <dbl> <dbl> <dbl> #>  1 1        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  858.  859.  877. #>  2 2        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  864.  865.  883. #>  3 3        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  864.  864.  882. #>  4 4        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  867.  867.  885. #>  5 5        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  865.  865.  883. #>  6 6        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  867.  867.  885. #>  7 7        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  863.  863.  881. #>  8 8        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  869.  869.  887. #>  9 9        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  868.  868.  886. #> 10 10       <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  871.  872.  890. #> # ℹ 38 more rows #> # ℹ 7 more variables: r2 <dbl>, r2_adjusted <dbl>, rmse <dbl>, sigma <dbl>, #> #   model_warnings <list>, model_messages <list>, pipeline_code <list>"},{"path":"https://ethan-young.github.io/multitool/articles/run-your-pipeline.html","id":"unpacking-specifications","dir":"Articles","previous_headings":"Unpacking a multiverse analysis","what":"Unpacking Specifications","title":"Run your Pipeline","text":"can also choose expand decision grid .unpack_specs see decisions produced result. two options unpacking decisions - wide long. set .unpack_specs = 'wide', get one column per decion variable. exactly decisions appeared grid. set .unpack_specs = 'long', decisions get stacked two columns: decision_set alternatives. format nice plotting particular result multiverse analyses per different decision alternatives.","code":"multiverse_results |>    reveal_model_parameters(.unpack_specs = \"wide\") #> # A tibble: 192 × 22 #>    decision ivs   dvs   include1      include2      include3    model model_meta #>    <chr>    <chr> <chr> <chr>         <chr>         <chr>       <chr> <chr>      #>  1 1        iv1   dv1   include1 == 0 include2 != 3 include3 >… lm(d… linear mo… #>  2 1        iv1   dv1   include1 == 0 include2 != 3 include3 >… lm(d… linear mo… #>  3 1        iv1   dv1   include1 == 0 include2 != 3 include3 >… lm(d… linear mo… #>  4 1        iv1   dv1   include1 == 0 include2 != 3 include3 >… lm(d… linear mo… #>  5 2        iv1   dv2   include1 == 0 include2 != 3 include3 >… lm(d… linear mo… #>  6 2        iv1   dv2   include1 == 0 include2 != 3 include3 >… lm(d… linear mo… #>  7 2        iv1   dv2   include1 == 0 include2 != 3 include3 >… lm(d… linear mo… #>  8 2        iv1   dv2   include1 == 0 include2 != 3 include3 >… lm(d… linear mo… #>  9 3        iv2   dv1   include1 == 0 include2 != 3 include3 >… lm(d… linear mo… #> 10 3        iv2   dv1   include1 == 0 include2 != 3 include3 >… lm(d… linear mo… #> # ℹ 182 more rows #> # ℹ 14 more variables: model_function <chr>, parameter <chr>, #> #   coefficient <dbl>, se <dbl>, ci <dbl>, ci_low <dbl>, ci_high <dbl>, #> #   t <dbl>, df_error <int>, p <dbl>, model_performance <list>, #> #   model_warnings <list>, model_messages <list>, pipeline_code <list> multiverse_results |>    reveal_model_performance(.unpack_specs = \"long\") #> # A tibble: 288 × 15 #>    decision decision_set alternatives    model_function model_parameters     aic #>    <chr>    <chr>        <chr>           <chr>          <list>             <dbl> #>  1 1        ivs          iv1             lm             <prmtrs_m [4 × 9]>  858. #>  2 1        dvs          dv1             lm             <prmtrs_m [4 × 9]>  858. #>  3 1        include1     include1 == 0   lm             <prmtrs_m [4 × 9]>  858. #>  4 1        include2     include2 != 3   lm             <prmtrs_m [4 × 9]>  858. #>  5 1        include3     include3 > -2.5 lm             <prmtrs_m [4 × 9]>  858. #>  6 1        model        linear model    lm             <prmtrs_m [4 × 9]>  858. #>  7 2        ivs          iv1             lm             <prmtrs_m [4 × 9]>  864. #>  8 2        dvs          dv2             lm             <prmtrs_m [4 × 9]>  864. #>  9 2        include1     include1 == 0   lm             <prmtrs_m [4 × 9]>  864. #> 10 2        include2     include2 != 3   lm             <prmtrs_m [4 × 9]>  864. #> # ℹ 278 more rows #> # ℹ 9 more variables: aicc <dbl>, bic <dbl>, r2 <dbl>, r2_adjusted <dbl>, #> #   rmse <dbl>, sigma <dbl>, model_warnings <list>, model_messages <list>, #> #   pipeline_code <list>"},{"path":"https://ethan-young.github.io/multitool/articles/run-your-pipeline.html","id":"condense","dir":"Articles","previous_headings":"Unpacking a multiverse analysis","what":"Condense","title":"Run your Pipeline","text":"Unpacking specifications alongside specific results allows us examine effects pipeline decisions. powerful way organize results summarize specific results column, say r2 values model entire multiverse. condense() takes result column summarizes .argument, takes list form list(<name pick> = <summary function>). .create column named like <column condsensed>_<summary function name provided>\". case, r2_meanandr2_median`. last example, filtered multiverse results look predictors iv* see mean median effect (combinations decisions) outcomes. However, three versions predictor two outcomes, combining dplyr::group_by() condense() might informative: interested terms model, can leverage group_by :","code":"# model performance r2 summaries multiverse_results |>   reveal_model_performance() |>    condense(r2, list(mean = mean, median = median)) #> # A tibble: 1 × 3 #>   r2_mean r2_median r2_list    #>     <dbl>     <dbl> <list>     #> 1 0.00966   0.00533 <dbl [48]>  # model parameters for our predictor of interest multiverse_results |>   reveal_model_parameters() |>    filter(str_detect(parameter, \"iv\")) |>   condense(coefficient, list(mean = mean, median = median)) #> # A tibble: 1 × 3 #>   coefficient_mean coefficient_median coefficient_list #>              <dbl>              <dbl> <list>           #> 1          -0.0211            -0.0176 <dbl [96]> multiverse_results |>   reveal_model_parameters(.unpack_specs = \"wide\") |>    filter(str_detect(parameter, \"iv\")) |>   group_by(ivs, dvs) |>   condense(coefficient, list(mean = mean, median = median)) #> # A tibble: 6 × 5 #> # Groups:   ivs [3] #>   ivs   dvs   coefficient_mean coefficient_median coefficient_list #>   <chr> <chr>            <dbl>              <dbl> <list>           #> 1 iv1   dv1            0.0202             0.0183  <dbl [16]>       #> 2 iv1   dv2           -0.0860            -0.0994  <dbl [16]>       #> 3 iv2   dv1           -0.0404            -0.0427  <dbl [16]>       #> 4 iv2   dv2           -0.0226            -0.0267  <dbl [16]>       #> 5 iv3   dv1           -0.00816           -0.00998 <dbl [16]>       #> 6 iv3   dv2            0.0107             0.0261  <dbl [16]> multiverse_results |>   reveal_model_parameters(.unpack_specs = \"wide\") |>    group_by(parameter, dvs) |>   condense(coefficient, list(mean = mean, median = median)) #> # A tibble: 16 × 5 #> # Groups:   parameter [8] #>    parameter   dvs   coefficient_mean coefficient_median coefficient_list #>    <chr>       <chr>            <dbl>              <dbl> <list>           #>  1 (Intercept) dv1           -0.0218            -0.0239  <dbl [24]>       #>  2 (Intercept) dv2           -0.0183            -0.0183  <dbl [24]>       #>  3 iv1         dv1            0.121              0.121   <dbl [8]>        #>  4 iv1         dv2           -0.0573            -0.0640  <dbl [8]>        #>  5 iv1:mod     dv1           -0.0811            -0.0801  <dbl [8]>        #>  6 iv1:mod     dv2           -0.115             -0.111   <dbl [8]>        #>  7 iv2         dv1           -0.0345            -0.0333  <dbl [8]>        #>  8 iv2         dv2           -0.0140            -0.0194  <dbl [8]>        #>  9 iv2:mod     dv1           -0.0463            -0.0427  <dbl [8]>        #> 10 iv2:mod     dv2           -0.0313            -0.0305  <dbl [8]>        #> 11 iv3         dv1           -0.00381           -0.00181 <dbl [8]>        #> 12 iv3         dv2           -0.0284            -0.0283  <dbl [8]>        #> 13 iv3:mod     dv1           -0.0125            -0.0111  <dbl [8]>        #> 14 iv3:mod     dv2            0.0498             0.0493  <dbl [8]>        #> 15 mod         dv1           -0.0629            -0.0685  <dbl [24]>       #> 16 mod         dv2            0.0171             0.0203  <dbl [24]>"},{"path":"https://ethan-young.github.io/multitool/articles/validate-your-blueprint.html","id":"blueprint-metadata","dir":"Articles","previous_headings":"","what":"Blueprint metadata","title":"Check and Test your Blueprint","text":"detect_* functions printing metadata pipeline. several filtering decisions, can also print summary sample sizes exclusion criteria applied. satisfied pipeline metadata, can expand test . , expand full decision grid.","code":"# Number of unique analysis pipelines detect_multiverse_n(full_pipeline) #> [1] 48  # Number of different versions of analysis variables detect_n_filters(full_pipeline) #> [1] 8  # Number of unique filtering criteria detect_n_filters(full_pipeline) #> [1] 8  # Number of unique models detect_n_models(full_pipeline) #> [1] 1 summarize_filter_ns(full_pipeline) #> # A tibble: 6 × 4 #>   filter_expression              variable n_retained n_excluded #>   <chr>                          <chr>         <int>      <int> #> 1 include1 == 0                  include1        457         43 #> 2 include1 %in% unique(include1) include1        500          0 #> 3 include2 != 3                  include2        346        154 #> 4 include2 %in% unique(include2) include2        500          0 #> 5 include3 > -2.5                include3        497          3 #> 6 include3 %in% unique(include3) include3        500          0 expanded_pipeline <- expand_decisions(full_pipeline)"},{"path":"https://ethan-young.github.io/multitool/articles/validate-your-blueprint.html","id":"test-your-blueprint","dir":"Articles","previous_headings":"","what":"Test your blueprint","title":"Check and Test your Blueprint","text":"multitool specification blueprint special feature: captures code generates analysis pipelines. special set functions show_code_* prefix allow see code executed single pipeline. example, can look filtering code first decision blueprint: functions allow generate relevant code along analysis pipeline. example, can look model pipeline decision 17 using show_code_model(decision_num = 17): Setting copy argument TRUE allows send code straight clipboard. can paste source console testing/editing.","code":"# Take a look at the first filter decision expanded_pipeline |> show_code_filter(decision_num = 1) #> the_data |>  #>   filter(include1 == 0, include2 != 3, include3 > -2.5) expanded_pipeline |> show_code_model(decision_num = 17) #> the_data |>  #>   filter(include1 == 0, include2 %in% unique(include2), include3 > -2.5) |>  #>   lm(dv1 ~ iv3 * mod, data = _)"},{"path":"https://ethan-young.github.io/multitool/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Young. Author, maintainer, copyright holder. Stefan Vermeent. Author.","code":""},{"path":"https://ethan-young.github.io/multitool/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Young E, Vermeent S (2023). multitool: Tools Running Multiverse Style Analyses. R package version 0.1.0, https://ethan-young.github.io/multitool/.","code":"@Manual{,   title = {multitool: Tools for Running Multiverse Style Analyses},   author = {Ethan Young and Stefan Vermeent},   year = {2023},   note = {R package version 0.1.0},   url = {https://ethan-young.github.io/multitool/}, }"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Running Multiverse Style Analyses","text":"can install development version multitool GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"ethan-young/multitool\")"},{"path":"https://ethan-young.github.io/multitool/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Tools for Running Multiverse Style Analyses","text":"goal multitool provide set tools designing running multiverse-style analyses. designed help users create incremental workflow slowly building , keeping track , unpacking multiverse analyses results.","code":""},{"path":"https://ethan-young.github.io/multitool/index.html","id":"multiverse-primer","dir":"","previous_headings":"","what":"Multiverse Primer","title":"Tools for Running Multiverse Style Analyses","text":"unfamiliar multiverse analysis, short primer:","code":""},{"path":"https://ethan-young.github.io/multitool/index.html","id":"beyond-multiverse","dir":"","previous_headings":"","what":"Beyond Multiverse","title":"Tools for Running Multiverse Style Analyses","text":"designed multitool multiverse analysis really just tool exploration. new field, area, project, lot uncertainty data analysis decisions make. Clear research questions criteria help reduce uncertainty answer never fully reduce . multitool helps organize systematically explore different options. ’s really .","code":""},{"path":"https://ethan-young.github.io/multitool/index.html","id":"design","dir":"","previous_headings":"","what":"Design","title":"Tools for Running Multiverse Style Analyses","text":"designed multitool help users take single use case (e.g., single analysis pipeline) expand workflow include alternative versions analysis. example, imagine like take data, remove outliers, transform variables, run linear model, post-hoc analysis, plot results. multitool can take theses tasks transform blueprint, provides instructions running analysis pipeline. functions designed play nice tidyverse require using base R pipe |>. makes easy quickly convert single analysis multiverse analysis.","code":""},{"path":"https://ethan-young.github.io/multitool/index.html","id":"basic-components","dir":"","previous_headings":"","what":"Basic components","title":"Tools for Running Multiverse Style Analyses","text":"vision multitool workflow contains five steps:  multitool make decisions – know set data decisions – can help create organize workflow . defining feature multitool saves code. allows user grab code produces result inspect accuracy, errors, simply peace mind. quickly grabbing code, user can iterate creating blueprint checking code works intended. multitool allows user model data however ’d like. user responsible loading relevant modeling packages. Regardless model choice, multitool capture code build blueprint alternative analysis pipelines. Finally, multiverse analyses originally intended look model parameters shift function arbitrary data decisions. However, computation might change depending slice dice data. reason, also built functions computing descriptive, correlation, reliability analysis alongside particular modelling pipeline.","code":""},{"path":"https://ethan-young.github.io/multitool/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Tools for Running Multiverse Style Analyses","text":"","code":"# load packages library(tidyverse) library(multitool)  # create some data the_data <-   data.frame(     id  = 1:100,     iv1 = rnorm(100),     iv2 = rnorm(100),     iv3 = rnorm(100),     mod = rnorm(100),     dv1 = rnorm(100),     dv2 = rnorm(100),     include1 = rbinom(100, size = 1, prob = .1),     include2 = sample(1:3, size = 100, replace = TRUE),     include3 = rnorm(100)   )  # create a pipeline blueprint full_pipeline <-    the_data |>   add_filters(include1 == 0, include2 != 3, include3 > -2.5) |>    add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>    add_variables(var_group = \"dvs\", dv1, dv2) |>    add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  full_pipeline #> # A tibble: 12 × 3 #>    type      group        code                           #>    <chr>     <chr>        <chr>                          #>  1 filters   include1     include1 == 0                  #>  2 filters   include1     include1 %in% unique(include1) #>  3 filters   include2     include2 != 3                  #>  4 filters   include2     include2 %in% unique(include2) #>  5 filters   include3     include3 > -2.5                #>  6 filters   include3     include3 %in% unique(include3) #>  7 variables ivs          iv1                            #>  8 variables ivs          iv2                            #>  9 variables ivs          iv3                            #> 10 variables dvs          dv1                            #> 11 variables dvs          dv2                            #> 12 models    linear model lm({dvs} ~ {ivs} * mod)  # Expand your blueprint into a grid expanded_pipeline <- expand_decisions(full_pipeline) expanded_pipeline #> # A tibble: 48 × 4 #>    decision variables        filters          models           #>    <chr>    <list>           <list>           <list>           #>  1 1        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  2 2        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  3 3        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  4 4        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  5 5        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  6 6        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  7 7        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  8 8        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #>  9 9        <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #> 10 10       <tibble [1 × 2]> <tibble [1 × 3]> <tibble [1 × 2]> #> # ℹ 38 more rows  # Run the blueprint multiverse_results <- run_multiverse(expanded_pipeline) multiverse_results #> # A tibble: 48 × 4 #>    decision specifications   model_fitted     pipeline_code    #>    <chr>    <list>           <list>           <list>           #>  1 1        <tibble [1 × 3]> <tibble [1 × 5]> <tibble [1 × 2]> #>  2 2        <tibble [1 × 3]> <tibble [1 × 5]> <tibble [1 × 2]> #>  3 3        <tibble [1 × 3]> <tibble [1 × 5]> <tibble [1 × 2]> #>  4 4        <tibble [1 × 3]> <tibble [1 × 5]> <tibble [1 × 2]> #>  5 5        <tibble [1 × 3]> <tibble [1 × 5]> <tibble [1 × 2]> #>  6 6        <tibble [1 × 3]> <tibble [1 × 5]> <tibble [1 × 2]> #>  7 7        <tibble [1 × 3]> <tibble [1 × 5]> <tibble [1 × 2]> #>  8 8        <tibble [1 × 3]> <tibble [1 × 5]> <tibble [1 × 2]> #>  9 9        <tibble [1 × 3]> <tibble [1 × 5]> <tibble [1 × 2]> #> 10 10       <tibble [1 × 3]> <tibble [1 × 5]> <tibble [1 × 2]> #> # ℹ 38 more rows  # Unpack model coefficients multiverse_results |>    reveal_model_parameters() #> # A tibble: 192 × 16 #>    decision specifications   model_function parameter   coefficient     se    ci #>    <chr>    <list>           <chr>          <chr>             <dbl>  <dbl> <dbl> #>  1 1        <tibble [1 × 3]> lm             (Intercept)    -0.122   0.143   0.95 #>  2 1        <tibble [1 × 3]> lm             iv1             0.144   0.126   0.95 #>  3 1        <tibble [1 × 3]> lm             mod             0.130   0.156   0.95 #>  4 1        <tibble [1 × 3]> lm             iv1:mod        -0.229   0.141   0.95 #>  5 2        <tibble [1 × 3]> lm             (Intercept)    -0.0903  0.0985  0.95 #>  6 2        <tibble [1 × 3]> lm             iv1            -0.0434  0.0865  0.95 #>  7 2        <tibble [1 × 3]> lm             mod            -0.0151  0.107   0.95 #>  8 2        <tibble [1 × 3]> lm             iv1:mod         0.0141  0.0968  0.95 #>  9 3        <tibble [1 × 3]> lm             (Intercept)    -0.0893  0.142   0.95 #> 10 3        <tibble [1 × 3]> lm             iv2             0.00917 0.160   0.95 #> # ℹ 182 more rows #> # ℹ 9 more variables: ci_low <dbl>, ci_high <dbl>, t <dbl>, df_error <int>, #> #   p <dbl>, model_performance <list>, model_warnings <list>, #> #   model_messages <list>, pipeline_code <list>  # Unpack model fit statistics multiverse_results |>    reveal_model_performance() #> # A tibble: 48 × 14 #>    decision specifications   model_function model_parameters     aic  aicc   bic #>    <chr>    <list>           <chr>          <list>             <dbl> <dbl> <dbl> #>  1 1        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  205.  206.  216. #>  2 2        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  156.  157.  167. #>  3 3        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  207.  208.  218. #>  4 4        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  152.  153.  163. #>  5 5        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  208.  209.  219. #>  6 6        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  155.  156.  166. #>  7 7        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  212.  213.  223. #>  8 8        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  160.  161.  171. #>  9 9        <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  213.  214.  224. #> 10 10       <tibble [1 × 3]> lm             <prmtrs_m [4 × 9]>  156.  157.  167. #> # ℹ 38 more rows #> # ℹ 7 more variables: r2 <dbl>, r2_adjusted <dbl>, rmse <dbl>, sigma <dbl>, #> #   model_warnings <list>, model_messages <list>, pipeline_code <list>  # Summarize model coefficients multiverse_results |>    reveal_model_parameters() |>    group_by(parameter) |>    condense(coefficient, list(mean = mean, median = median, sd = sd)) #> # A tibble: 8 × 5 #>   parameter  coefficient_mean coefficient_median coefficient_sd coefficient_list #>   <chr>                 <dbl>              <dbl>          <dbl> <list>           #> 1 (Intercep…          -0.0994           -0.0940          0.0250 <dbl [48]>       #> 2 iv1                  0.0598            0.0699          0.0823 <dbl [16]>       #> 3 iv1:mod             -0.110            -0.112           0.104  <dbl [16]>       #> 4 iv2                 -0.0783           -0.0579          0.0912 <dbl [16]>       #> 5 iv2:mod             -0.0778           -0.0935          0.141  <dbl [16]>       #> 6 iv3                 -0.0157           -0.00618         0.0531 <dbl [16]>       #> 7 iv3:mod              0.122             0.137           0.0382 <dbl [16]>       #> 8 mod                  0.0482            0.0405          0.0732 <dbl [48]>  # Summarize fit statistics multiverse_results |>    reveal_model_performance() |>    condense(r2, list(mean = mean, sd = sd)) #> # A tibble: 1 × 3 #>   r2_mean  r2_sd r2_list    #>     <dbl>  <dbl> <list>     #> 1  0.0305 0.0192 <dbl [48]>"},{"path":"https://ethan-young.github.io/multitool/reference/add_correlations.html","id":null,"dir":"Reference","previous_headings":"","what":"Add correlations from the correlation package in easystats — add_correlations","title":"Add correlations from the correlation package in easystats — add_correlations","text":"Add correlations correlation package easystats","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_correlations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add correlations from the correlation package in easystats — add_correlations","text":"","code":"add_correlations(   .df,   var_set,   variables,   focus_set = NULL,   method = \"auto\",   redundant = TRUE,   add_matrix = TRUE )"},{"path":"https://ethan-young.github.io/multitool/reference/add_correlations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add correlations from the correlation package in easystats — add_correlations","text":".df original data.frame(e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. var_set character string. descriptive name correlation matrix. variables variables like correlations. variables passed link[correlation]{correlation}. can also use tidyselect select variables. focus_set variables focus one table. produces table rows focused variables columns variables method valid method correlation supplied link[correlation]{correlation} (e.g., 'pearson' 'kendall'). Defaults 'auto'. See link[correlation]{correlation} details. redundant logical, result include repeated correlations? Defaults TRUE See link[correlation]{correlation} details. add_matrix logical, add traditional correlation matrix output. Defaults TRUE.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_correlations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add correlations from the correlation package in easystats — add_correlations","text":"data.framewith three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_correlations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add correlations from the correlation package in easystats — add_correlations","text":"","code":"library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.3     ✔ readr     2.1.4 #> ✔ forcats   1.0.0     ✔ stringr   1.5.0 #> ✔ ggplot2   3.4.4     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.3     ✔ tidyr     1.3.0 #> ✔ purrr     1.0.2      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2, include3 > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_correlations(\"predictors\", matches(\"iv|mod|cov\"), focus_set = c(cov1,cov2)) #> # A tibble: 18 × 3 #>    type      group             code                                              #>    <chr>     <chr>             <chr>                                             #>  1 filters   include1          \"include1 == 0\"                                   #>  2 filters   include1          \"include1 %in% unique(include1)\"                  #>  3 filters   include2          \"include2 != 3\"                                   #>  4 filters   include2          \"include2 != 2\"                                   #>  5 filters   include2          \"include2 %in% unique(include2)\"                  #>  6 filters   include3          \"include3 > -2.5\"                                 #>  7 filters   include3          \"include3 %in% unique(include3)\"                  #>  8 variables ivs               \"iv1\"                                             #>  9 variables ivs               \"iv2\"                                             #> 10 variables ivs               \"iv3\"                                             #> 11 variables dvs               \"dv1\"                                             #> 12 variables dvs               \"dv2\"                                             #> 13 variables mods              \"mod1\"                                            #> 14 variables mods              \"mod2\"                                            #> 15 variables mods              \"mod3\"                                            #> 16 corrs     predictors_rs     \"select(matches(\\\"iv|mod|cov\\\")) |> correlation(… #> 17 corrs     predictors_matrix \"select(matches(\\\"iv|mod|cov\\\")) |> correlation(… #> 18 corrs     predictors_focus  \"select(matches(\\\"iv|mod|cov\\\")) |> correlation(…"},{"path":"https://ethan-young.github.io/multitool/reference/add_filters.html","id":null,"dir":"Reference","previous_headings":"","what":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","title":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","text":"Add filtering/exclusion criteria multiverse pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_filters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","text":"","code":"add_filters(.df, ...)"},{"path":"https://ethan-young.github.io/multitool/reference/add_filters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","text":".df original data.frame(e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. ... logical expressions used filter separated commas. Expressions quoted.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_filters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_filters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add filtering/exclusion criteria to a multiverse pipeline — add_filters","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2, include3 > -2.5) #> # A tibble: 7 × 3 #>   type    group    code                           #>   <chr>   <chr>    <chr>                          #> 1 filters include1 include1 == 0                  #> 2 filters include1 include1 %in% unique(include1) #> 3 filters include2 include2 != 3                  #> 4 filters include2 include2 != 2                  #> 5 filters include2 include2 %in% unique(include2) #> 6 filters include3 include3 > -2.5                #> 7 filters include3 include3 %in% unique(include3)"},{"path":"https://ethan-young.github.io/multitool/reference/add_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a model and formula to a multiverse pipeline — add_model","title":"Add a model and formula to a multiverse pipeline — add_model","text":"Add model formula multiverse pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a model and formula to a multiverse pipeline — add_model","text":"","code":"add_model(.df, model_desc, code)"},{"path":"https://ethan-young.github.io/multitool/reference/add_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a model and formula to a multiverse pipeline — add_model","text":".df original data.frame(e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. model_desc human readable name like give model. code literal model syntax like run. can use glue inside formulas dynamically generate variable names based variable grid. example, make variable grid two versions IVs (e.g., iv1 iv2), can write formula like : lm(happiness ~ {iv} + control_var). requirement variables written formula actually exist underlying data. also responsible loading packages run particular model (e.g., lme4 mixed-models)","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a model and formula to a multiverse pipeline — add_model","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a model and formula to a multiverse pipeline — add_model","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2, include3 > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_preprocess(\"scale_iv\", 'mutate({ivs} = scale({ivs}))') |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * {mods})) #> # A tibble: 17 × 3 #>    type       group        code                           #>    <chr>      <chr>        <chr>                          #>  1 filters    include1     include1 == 0                  #>  2 filters    include1     include1 %in% unique(include1) #>  3 filters    include2     include2 != 3                  #>  4 filters    include2     include2 != 2                  #>  5 filters    include2     include2 %in% unique(include2) #>  6 filters    include3     include3 > -2.5                #>  7 filters    include3     include3 %in% unique(include3) #>  8 variables  ivs          iv1                            #>  9 variables  ivs          iv2                            #> 10 variables  ivs          iv3                            #> 11 variables  dvs          dv1                            #> 12 variables  dvs          dv2                            #> 13 variables  mods         mod1                           #> 14 variables  mods         mod2                           #> 15 variables  mods         mod3                           #> 16 preprocess scale_iv     mutate({ivs} = scale({ivs}))   #> 17 models     linear model lm({dvs} ~ {ivs} * {mods})"},{"path":"https://ethan-young.github.io/multitool/reference/add_parameter_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Add parameter keys names for later use in summarizing model effects — add_parameter_keys","title":"Add parameter keys names for later use in summarizing model effects — add_parameter_keys","text":"Add parameter keys names later use summarizing model effects","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_parameter_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add parameter keys names for later use in summarizing model effects — add_parameter_keys","text":"","code":"add_parameter_keys(.df, parameter_group, parameter_name)"},{"path":"https://ethan-young.github.io/multitool/reference/add_parameter_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add parameter keys names for later use in summarizing model effects — add_parameter_keys","text":".df original data.frame(e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. parameter_group character, name parameter interest parameter_name quoted unquoted names variables involved particular parameter interest. Usually just variable model (e.g., main effect iv). However, also interaction term term. can use glue syntax specify effect might use alternative versions variable.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_parameter_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add parameter keys names for later use in summarizing model effects — add_parameter_keys","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_parameter_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add parameter keys names for later use in summarizing model effects — add_parameter_keys","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * {mods})) |>   add_parameter_keys(\"my_interaction\", \"{ivs}:{mods}\") |>   add_parameter_keys(\"my_main_effect\", {ivs}) #> # A tibble: 11 × 3 #>    type          group          code                       #>    <chr>         <chr>          <chr>                      #>  1 variables     ivs            iv1                        #>  2 variables     ivs            iv2                        #>  3 variables     ivs            iv3                        #>  4 variables     dvs            dv1                        #>  5 variables     dvs            dv2                        #>  6 variables     mods           mod1                       #>  7 variables     mods           mod2                       #>  8 variables     mods           mod3                       #>  9 models        linear model   lm({dvs} ~ {ivs} * {mods}) #> 10 parameter_key my_interaction {ivs}:{mods}               #> 11 parameter_key my_main_effect {ivs}"},{"path":"https://ethan-young.github.io/multitool/reference/add_postprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","title":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","text":"Add arbitrary postprocessing code multiverse pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_postprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","text":"","code":"add_postprocess(.df, postprocess_name, code)"},{"path":"https://ethan-young.github.io/multitool/reference/add_postprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","text":".df original data.frame(e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. postprocess_name character string. descriptive name postprocessing step accomplishes. code literal code like execute analysis. code written work pipes (.e., |> %>%). post-processing code comes last multiverse analysis step, chosen model object passed post-processing code. example, fit simple linear model like: lm(y ~ x1 + x2), post-processing code executes call anova, simply pass anova() add_postprocess(). underlying code : data |> filters |> lm(y ~ x1 + x2, data = _) |> anova()","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_postprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_postprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add arbitrary postprocessing code to a multiverse pipeline — add_postprocess","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2, include3 > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_preprocess(\"scale_iv\", 'mutate({ivs} = scale({ivs}))') |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * {mods})) |>   add_postprocess(\"analysis of variance\", aov()) #> # A tibble: 18 × 3 #>    type        group                code                           #>    <chr>       <chr>                <chr>                          #>  1 filters     include1             include1 == 0                  #>  2 filters     include1             include1 %in% unique(include1) #>  3 filters     include2             include2 != 3                  #>  4 filters     include2             include2 != 2                  #>  5 filters     include2             include2 %in% unique(include2) #>  6 filters     include3             include3 > -2.5                #>  7 filters     include3             include3 %in% unique(include3) #>  8 variables   ivs                  iv1                            #>  9 variables   ivs                  iv2                            #> 10 variables   ivs                  iv3                            #> 11 variables   dvs                  dv1                            #> 12 variables   dvs                  dv2                            #> 13 variables   mods                 mod1                           #> 14 variables   mods                 mod2                           #> 15 variables   mods                 mod3                           #> 16 preprocess  scale_iv             mutate({ivs} = scale({ivs}))   #> 17 models      linear model         lm({dvs} ~ {ivs} * {mods})     #> 18 postprocess analysis of variance aov()"},{"path":"https://ethan-young.github.io/multitool/reference/add_preprocess.html","id":null,"dir":"Reference","previous_headings":"","what":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","title":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","text":"Add arbitrary preprocessing code multiverse analysis pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_preprocess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","text":"","code":"add_preprocess(.df, process_name, code)"},{"path":"https://ethan-young.github.io/multitool/reference/add_preprocess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","text":".df original data.frame(e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. process_name character string. descriptive name preprocessing step accomplishes. code literal code like execute data filtered. glue syntax allowed. example might centering scaling predictor appropriate filters applied data. code written work pipes (.e., |> %>%). Pre-processing code eventually take base data along filters applied data. means mutate calls natural functions take data.frame first argument work well (long also return data.frame).","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_preprocess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_preprocess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add arbitrary preprocessing code to a multiverse analysis pipeline — add_preprocess","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2, include3 > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_preprocess(\"scale_iv\", 'mutate({ivs} = scale({ivs}))') #> # A tibble: 16 × 3 #>    type       group    code                           #>    <chr>      <chr>    <chr>                          #>  1 filters    include1 include1 == 0                  #>  2 filters    include1 include1 %in% unique(include1) #>  3 filters    include2 include2 != 3                  #>  4 filters    include2 include2 != 2                  #>  5 filters    include2 include2 %in% unique(include2) #>  6 filters    include3 include3 > -2.5                #>  7 filters    include3 include3 %in% unique(include3) #>  8 variables  ivs      iv1                            #>  9 variables  ivs      iv2                            #> 10 variables  ivs      iv3                            #> 11 variables  dvs      dv1                            #> 12 variables  dvs      dv2                            #> 13 variables  mods     mod1                           #> 14 variables  mods     mod2                           #> 15 variables  mods     mod3                           #> 16 preprocess scale_iv mutate({ivs} = scale({ivs}))"},{"path":"https://ethan-young.github.io/multitool/reference/add_reliabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Add item reliabilities to a multiverse pipeline — add_reliabilities","title":"Add item reliabilities to a multiverse pipeline — add_reliabilities","text":"Add item reliabilities multiverse pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_reliabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add item reliabilities to a multiverse pipeline — add_reliabilities","text":"","code":"add_reliabilities(.df, scale_name, items)"},{"path":"https://ethan-young.github.io/multitool/reference/add_reliabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add item reliabilities to a multiverse pipeline — add_reliabilities","text":".df original data.frame(e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. scale_name character string. Indicates name scale measure measured items indicators items. items items (variables) comprise scale measure. variables passed link[performance]{cronbachs_alpha}, link[performance]{item_intercor}, link[performance]{item_reliability}. can also use tidyselect select variables.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_reliabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add item reliabilities to a multiverse pipeline — add_reliabilities","text":"data.framewith three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_reliabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add item reliabilities to a multiverse pipeline — add_reliabilities","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2, include3 > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_reliabilities(\"unp_scale\", c(iv1,iv2,iv3)) #> # A tibble: 18 × 3 #>    type          group                code                                       #>    <chr>         <chr>                <chr>                                      #>  1 filters       include1             include1 == 0                              #>  2 filters       include1             include1 %in% unique(include1)             #>  3 filters       include2             include2 != 3                              #>  4 filters       include2             include2 != 2                              #>  5 filters       include2             include2 %in% unique(include2)             #>  6 filters       include3             include3 > -2.5                            #>  7 filters       include3             include3 %in% unique(include3)             #>  8 variables     ivs                  iv1                                        #>  9 variables     ivs                  iv2                                        #> 10 variables     ivs                  iv3                                        #> 11 variables     dvs                  dv1                                        #> 12 variables     dvs                  dv2                                        #> 13 variables     mods                 mod1                                       #> 14 variables     mods                 mod2                                       #> 15 variables     mods                 mod3                                       #> 16 reliabilities unp_scale_alpha      select(c(iv1, iv2, iv3)) |> cronbachs_alp… #> 17 reliabilities unp_scale_inter_corr select(c(iv1, iv2, iv3)) |> item_intercor… #> 18 reliabilities unp_scale_if_dropped select(c(iv1, iv2, iv3)) |> item_reliabil…"},{"path":"https://ethan-young.github.io/multitool/reference/add_summary_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a set of descriptive statistics to compute over a set of variables — add_summary_stats","title":"Add a set of descriptive statistics to compute over a set of variables — add_summary_stats","text":"Add set descriptive statistics compute set variables","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_summary_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a set of descriptive statistics to compute over a set of variables — add_summary_stats","text":"","code":"add_summary_stats(.df, var_set, variables, stats)"},{"path":"https://ethan-young.github.io/multitool/reference/add_summary_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a set of descriptive statistics to compute over a set of variables — add_summary_stats","text":".df original data.frame(e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. var_set character string. name set summary statistics variables variables like compute summary statistics. can also use tidyselect select variables. stats character vector stat names (e.g., c(\"mean\",\"sd\")). responsible loading packages compute preferred summary statistics. Summary statistic functions must work inside summarize.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_summary_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a set of descriptive statistics to compute over a set of variables — add_summary_stats","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_summary_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a set of descriptive statistics to compute over a set of variables — add_summary_stats","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2, include3 > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_preprocess(process_name = \"scale_iv\", 'mutate({ivs} = scale({ivs}))') |>   add_preprocess(process_name = \"scale_mod\", mutate({mods} := scale({mods}))) |>   add_summary_stats(\"iv_stats\", starts_with(\"iv\"), c(\"mean\", \"sd\")) |>   add_summary_stats(\"dv_stats\", starts_with(\"dv\"), c(\"skewness\", \"kurtosis\")) #> # A tibble: 19 × 3 #>    type          group     code                                                  #>    <chr>         <chr>     <chr>                                                 #>  1 filters       include1  \"include1 == 0\"                                       #>  2 filters       include1  \"include1 %in% unique(include1)\"                      #>  3 filters       include2  \"include2 != 3\"                                       #>  4 filters       include2  \"include2 != 2\"                                       #>  5 filters       include2  \"include2 %in% unique(include2)\"                      #>  6 filters       include3  \"include3 > -2.5\"                                     #>  7 filters       include3  \"include3 %in% unique(include3)\"                      #>  8 variables     ivs       \"iv1\"                                                 #>  9 variables     ivs       \"iv2\"                                                 #> 10 variables     ivs       \"iv3\"                                                 #> 11 variables     dvs       \"dv1\"                                                 #> 12 variables     dvs       \"dv2\"                                                 #> 13 variables     mods      \"mod1\"                                                #> 14 variables     mods      \"mod2\"                                                #> 15 variables     mods      \"mod3\"                                                #> 16 preprocess    scale_iv  \"mutate({ivs} = scale({ivs}))\"                        #> 17 preprocess    scale_mod \"mutate(`:=`({mods}, scale({mods})))\"                 #> 18 summary_stats iv_stats  \"select(c(starts_with(\\\"iv\\\"))) |> summarize(across(… #> 19 summary_stats dv_stats  \"select(c(starts_with(\\\"dv\\\"))) |> summarize(across(…"},{"path":"https://ethan-young.github.io/multitool/reference/add_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a set of variable alternatives to a multiverse pipeline — add_variables","title":"Add a set of variable alternatives to a multiverse pipeline — add_variables","text":"Add set variable alternatives multiverse pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a set of variable alternatives to a multiverse pipeline — add_variables","text":"","code":"add_variables(.df, var_group, ...)"},{"path":"https://ethan-young.github.io/multitool/reference/add_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a set of variable alternatives to a multiverse pipeline — add_variables","text":".df original data.frame(e.g., base data set). part set add_* decision functions pipeline, base data passed along attribute. var_group character string. Indicates name current set. example, \"primary_iv\" indicate set alternatives main predictor analysis. ... bare unquoted names variables include alternative options variable set. can also use tidyselect select variables.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a set of variable alternatives to a multiverse pipeline — add_variables","text":"data.frame three columns: type, group, code. Type indicates decision type, group decision, code actual code executed. part pipe, current set decisions appended new rows.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/add_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a set of variable alternatives to a multiverse pipeline — add_variables","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  the_data |>  add_variables(\"ivs\", iv1, iv2, iv3) |>  add_variables(\"dvs\", dv1, dv2) |>  add_variables(\"mods\", starts_with(\"mod\")) #> # A tibble: 8 × 3 #>   type      group code  #>   <chr>     <chr> <chr> #> 1 variables ivs   iv1   #> 2 variables ivs   iv2   #> 3 variables ivs   iv3   #> 4 variables dvs   dv1   #> 5 variables dvs   dv2   #> 6 variables mods  mod1  #> 7 variables mods  mod2  #> 8 variables mods  mod3"},{"path":"https://ethan-young.github.io/multitool/reference/condense.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize multiverse parameters — condense","title":"Summarize multiverse parameters — condense","text":"Summarize multiverse parameters","code":""},{"path":"https://ethan-young.github.io/multitool/reference/condense.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize multiverse parameters — condense","text":"","code":"condense(.unpacked, .what, .how, .group = NULL, list_cols = TRUE)"},{"path":"https://ethan-young.github.io/multitool/reference/condense.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize multiverse parameters — condense","text":".unpacked unpacked (reveal unnest) multiverse dataset. .specific column summarize. model estimate, summary statistic, correlation, estimate computed multiverse. .named list. list contain summary functions (e.g., mean median) user like compute individual estimates multiverse .group optional variable group results. argument passed directly .argument used dplyr::across list_cols logical, whether create list columns raw values summarized columns. Useful creating visualizations tables. Default TRUE.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/condense.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize multiverse parameters — condense","text":"summarized tibble containing column summary method .","code":""},{"path":"https://ethan-young.github.io/multitool/reference/condense.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize multiverse parameters — condense","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # Decision pipeline full_pipeline <-   the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_model(\"linear_model\", lm({dvs} ~ {ivs} * {mods} + cov1))  pipeline_grid <- expand_decisions(full_pipeline)  # Run the whole multiverse the_multiverse <- run_multiverse(pipeline_grid[1:10,]) #> Error in purrr::map(seq_len(nrow(.grid)), .progress = show_progress, function(x) {    multi_results <- list()    if (\"models\" %in% names(.grid)) {        multi_results$models <- run_universe_model(.grid = .grid,             decision_num = .grid$decision[x], save_model = save_model)    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: model. #> Caused by error: #> ! object 'the_data' not found  # Reveal and condense the_multiverse |>   reveal_model_parameters() |>   filter(str_detect(parameter, \"iv\")) |>   condense(coefficient, list(mean = mean, median = median)) #> Error in eval(expr, envir, enclos): object 'the_multiverse' not found"},{"path":"https://ethan-young.github.io/multitool/reference/create_blueprint_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Analysis Pipeline diagram — create_blueprint_graph","title":"Create a Analysis Pipeline diagram — create_blueprint_graph","text":"Create Analysis Pipeline diagram","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_blueprint_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Analysis Pipeline diagram — create_blueprint_graph","text":"","code":"create_blueprint_graph(   .pipeline,   splines = \"line\",   render = TRUE,   show_code = FALSE,   ... )"},{"path":"https://ethan-young.github.io/multitool/reference/create_blueprint_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Analysis Pipeline diagram — create_blueprint_graph","text":".pipeline data.frame produced calling series add_* functions. splines options draw edges (lines) grViz diagram render whether render graph just output grViz code show_code whether show code generated diagram ... additional options passed DiagrammeR::grViz()","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_blueprint_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Analysis Pipeline diagram — create_blueprint_graph","text":"grViz graph pipeline","code":""},{"path":"https://ethan-young.github.io/multitool/reference/create_blueprint_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Analysis Pipeline diagram — create_blueprint_graph","text":"","code":"library(tidyverse) library(multitool)  # create some data the_data <-   data.frame(     id  = 1:500,     iv1 = rnorm(500),     iv2 = rnorm(500),     iv3 = rnorm(500),     mod = rnorm(500),     dv1 = rnorm(500),     dv2 = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # create a pipeline blueprint full_pipeline <-   the_data |>   add_filters(include1 == 0, include2 != 3, scale(include3) > -2.5) |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>   add_variables(var_group = \"dvs\", dv1, dv2) |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  create_blueprint_graph(full_pipeline) #> no descriptives #> you have no preprocessing steps in your pipeline #> you have no post processing steps in your pipeline  {\"x\":{\"diagram\":\"digraph {\\n\\ngraph [layout = \\\"dot\\\",\\n       outputorder = \\\"edgesfirst\\\",\\n       bgcolor = \\\"white\\\",\\n       splines = \\\"line\\\",\\n       overlap = \\\"false\\\"]\\n\\nnode [fontname = \\\"Helvetica\\\",\\n      fontsize = \\\"10\\\",\\n      shape = \\\"rect\\\",\\n      fixedsize = \\\"false\\\",\\n      width = \\\"0.5\\\",\\n      style = \\\"rounded\\\",\\n      fillcolor = \\\"aliceblue\\\",\\n      color = \\\"gray\\\",\\n      fontcolor = \\\"black\\\",\\n      margin = \\\".25, 0\\\"]\\n\\nedge [fontname = \\\"Helvetica\\\",\\n     fontsize = \\\"8\\\",\\n     len = \\\"1.5\\\",\\n     color = \\\"gray80\\\",\\n     arrowsize = \\\"0.5\\\",\\n     tailport = \\\"s\\\",\\n     headport = \\\"n\\\",\\n     concentrate = \\\"false\\\",\\n     constraint = \\\"true\\\"]\\n\\n  \\\"1\\\" [label = <<BR/><B>Base Dataset<\\/B><BR ALIGN=\\\"LEFT\\\"/><BR ALIGN=\\\"LEFT\\\"/>the_data<BR/> >] \\n  \\\"2\\\" [label = <<BR/><B>Variables<\\/B><BR/><BR/>2 sets<BR/>(2*3 = 6)<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"3\\\" [label = <<BR/><B>dvs<\\/B><BR ALIGN=\\\"LEFT\\\"/>&#x2022; dv1<BR ALIGN=\\\"LEFT\\\"/>&#x2022; dv2<BR ALIGN=\\\"LEFT\\\"/><BR ALIGN=\\\"LEFT\\\"/><B>ivs<\\/B><BR ALIGN=\\\"LEFT\\\"/>&#x2022; iv1<BR ALIGN=\\\"LEFT\\\"/>&#x2022; iv2<BR ALIGN=\\\"LEFT\\\"/>&#x2022; iv3<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"4\\\" [label = <<BR/><B>Filters<\\/B><BR/><BR/>3 sets<BR/>(2*2*2 = 8)<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"5\\\" [label = <<BR/><B>include1<\\/B><BR ALIGN=\\\"LEFT\\\"/>&#x2022; include1 equals 0<BR ALIGN=\\\"LEFT\\\"/>&#x2022; include1 is any value<BR ALIGN=\\\"LEFT\\\"/><BR ALIGN=\\\"LEFT\\\"/><B>include2<\\/B><BR ALIGN=\\\"LEFT\\\"/>&#x2022; include2 does not equal 3<BR ALIGN=\\\"LEFT\\\"/>&#x2022; include2 is any value<BR ALIGN=\\\"LEFT\\\"/><BR ALIGN=\\\"LEFT\\\"/><B>include3<\\/B><BR ALIGN=\\\"LEFT\\\"/>&#x2022; z-scored include3 is bigger than -2.5<BR ALIGN=\\\"LEFT\\\"/>&#x2022; include3 is any value<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"6\\\" [label = <<BR/><B>48 analysis datasets<\\/B><BR/><BR/>filters (8) * variables (6)<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"7\\\" [label = <<BR/><B>linear model<\\/B><BR/><BR/>lm({dvs} ~ {ivs} * mod)<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"8\\\" [label = <<BR/><B>48 fitted models<\\/B><BR ALIGN=\\\"LEFT\\\"/><BR ALIGN=\\\"LEFT\\\"/>(2*2*2*2*3*1)<BR/> >] \\n  \\\"1\\\" [label = <<BR/><B>Base Dataset<\\/B><BR ALIGN=\\\"LEFT\\\"/><BR ALIGN=\\\"LEFT\\\"/>the_data<BR/> >] \\nsubgraph{rank = same\\n  \\\"2\\\" [label = <<BR/><B>Variables<\\/B><BR/><BR/>2 sets<BR/>(2*3 = 6)<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"3\\\" [label = <<BR/><B>dvs<\\/B><BR ALIGN=\\\"LEFT\\\"/>&#x2022; dv1<BR ALIGN=\\\"LEFT\\\"/>&#x2022; dv2<BR ALIGN=\\\"LEFT\\\"/><BR ALIGN=\\\"LEFT\\\"/><B>ivs<\\/B><BR ALIGN=\\\"LEFT\\\"/>&#x2022; iv1<BR ALIGN=\\\"LEFT\\\"/>&#x2022; iv2<BR ALIGN=\\\"LEFT\\\"/>&#x2022; iv3<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"4\\\" [label = <<BR/><B>Filters<\\/B><BR/><BR/>3 sets<BR/>(2*2*2 = 8)<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"5\\\" [label = <<BR/><B>include1<\\/B><BR ALIGN=\\\"LEFT\\\"/>&#x2022; include1 equals 0<BR ALIGN=\\\"LEFT\\\"/>&#x2022; include1 is any value<BR ALIGN=\\\"LEFT\\\"/><BR ALIGN=\\\"LEFT\\\"/><B>include2<\\/B><BR ALIGN=\\\"LEFT\\\"/>&#x2022; include2 does not equal 3<BR ALIGN=\\\"LEFT\\\"/>&#x2022; include2 is any value<BR ALIGN=\\\"LEFT\\\"/><BR ALIGN=\\\"LEFT\\\"/><B>include3<\\/B><BR ALIGN=\\\"LEFT\\\"/>&#x2022; z-scored include3 is bigger than -2.5<BR ALIGN=\\\"LEFT\\\"/>&#x2022; include3 is any value<BR ALIGN=\\\"LEFT\\\"/> >] }\\n\\n  \\\"6\\\" [label = <<BR/><B>48 analysis datasets<\\/B><BR/><BR/>filters (8) * variables (6)<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"7\\\" [label = <<BR/><B>linear model<\\/B><BR/><BR/>lm({dvs} ~ {ivs} * mod)<BR ALIGN=\\\"LEFT\\\"/> >] \\n  \\\"8\\\" [label = <<BR/><B>48 fitted models<\\/B><BR ALIGN=\\\"LEFT\\\"/><BR ALIGN=\\\"LEFT\\\"/>(2*2*2*2*3*1)<BR/> >] \\n\\\"3\\\"->\\\"2\\\" [style = \\\"invis\\\", style = \\\"invis\\\", style = \\\"invis\\\", headport = \\\"n\\\", tailport = \\\"s\\\"] \\n\\\"2\\\"->\\\"4\\\" [style = \\\"invis\\\", style = \\\"invis\\\", style = \\\"invis\\\", headport = \\\"n\\\", tailport = \\\"s\\\"] \\n\\\"4\\\"->\\\"5\\\" [style = \\\"invis\\\", style = \\\"invis\\\", style = \\\"invis\\\", headport = \\\"n\\\", tailport = \\\"s\\\"] \\n\\\"1\\\"->\\\"4\\\" [tailport = \\\"s\\\", tailport = \\\"s\\\", tailport = \\\"s\\\", headport = \\\"n\\\", tailport = \\\"s\\\"] \\n\\\"1\\\"->\\\"2\\\" [tailport = \\\"s\\\", tailport = \\\"s\\\", tailport = \\\"s\\\", headport = \\\"n\\\", tailport = \\\"s\\\"] \\n\\\"3\\\"->\\\"2\\\" [style = \\\"solid\\\", arrowhead = \\\"none\\\", arrowtail = \\\"none\\\", headport = \\\"w\\\", tailport = \\\"e\\\"] \\n\\\"4\\\"->\\\"5\\\" [style = \\\"solid\\\", arrowhead = \\\"none\\\", arrowtail = \\\"none\\\", headport = \\\"w\\\", tailport = \\\"e\\\"] \\n\\\"2\\\"->\\\"6\\\" [tailport = \\\"e\\\", tailport = \\\"e\\\", tailport = \\\"e\\\", headport = \\\"n\\\", tailport = \\\"s\\\"] \\n\\\"4\\\"->\\\"6\\\" [tailport = \\\"s\\\", tailport = \\\"s\\\", tailport = \\\"s\\\", headport = \\\"n\\\", tailport = \\\"s\\\"] \\n\\\"6\\\"->\\\"7\\\" [tailport = \\\"s\\\", tailport = \\\"s\\\", tailport = \\\"s\\\", headport = \\\"n\\\", tailport = \\\"s\\\"] \\n\\\"7\\\"->\\\"8\\\" [tailport = \\\"s\\\", tailport = \\\"s\\\", tailport = \\\"s\\\", headport = \\\"n\\\", tailport = \\\"s\\\"] \\n}\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://ethan-young.github.io/multitool/reference/detect_multiverse_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect total number of analysis pipelines — detect_multiverse_n","title":"Detect total number of analysis pipelines — detect_multiverse_n","text":"Detect total number analysis pipelines","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_multiverse_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect total number of analysis pipelines — detect_multiverse_n","text":"","code":"detect_multiverse_n(.pipeline, include_models = TRUE)"},{"path":"https://ethan-young.github.io/multitool/reference/detect_multiverse_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect total number of analysis pipelines — detect_multiverse_n","text":".pipeline data.frame produced calling series add_* functions. include_models Whether count alternative models one add_model() call.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_multiverse_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect total number of analysis pipelines — detect_multiverse_n","text":"numeric, total number unique analysis pipelines","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_multiverse_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect total number of analysis pipelines — detect_multiverse_n","text":"","code":"library(tidyverse) library(multitool)  # create some data the_data <-   data.frame(     id  = 1:500,     iv1 = rnorm(500),     iv2 = rnorm(500),     iv3 = rnorm(500),     mod = rnorm(500),     dv1 = rnorm(500),     dv2 = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # create a pipeline blueprint full_pipeline <-   the_data |>   add_filters(include1 == 0, include2 != 3, include3 > -2.5) |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>   add_variables(var_group = \"dvs\", dv1, dv2) |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  detect_multiverse_n(full_pipeline) #> [1] 48"},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_filters.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect total number of filtering expressions your pipelines — detect_n_filters","title":"Detect total number of filtering expressions your pipelines — detect_n_filters","text":"Detect total number filtering expressions pipelines","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_filters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect total number of filtering expressions your pipelines — detect_n_filters","text":"","code":"detect_n_filters(.pipeline)"},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_filters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect total number of filtering expressions your pipelines — detect_n_filters","text":".pipeline data.frame produced calling series add_* functions.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_filters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect total number of filtering expressions your pipelines — detect_n_filters","text":"numeric, total number filtering expressions","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_filters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect total number of filtering expressions your pipelines — detect_n_filters","text":"","code":"library(tidyverse) library(multitool)  # create some data the_data <-   data.frame(     id  = 1:500,     iv1 = rnorm(500),     iv2 = rnorm(500),     iv3 = rnorm(500),     mod = rnorm(500),     dv1 = rnorm(500),     dv2 = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # create a pipeline blueprint full_pipeline <-   the_data |>   add_filters(include1 == 0, include2 != 3, include3 > -2.5) |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>   add_variables(var_group = \"dvs\", dv1, dv2) |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  detect_n_filters(full_pipeline) #> [1] 8"},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect total number of models in your pipelines — detect_n_models","title":"Detect total number of models in your pipelines — detect_n_models","text":"Detect total number models pipelines","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect total number of models in your pipelines — detect_n_models","text":"","code":"detect_n_models(.pipeline)"},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect total number of models in your pipelines — detect_n_models","text":".pipeline data.frame produced calling series add_* functions.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect total number of models in your pipelines — detect_n_models","text":"numeric, total number unique models","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_models.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect total number of models in your pipelines — detect_n_models","text":"","code":"library(tidyverse) library(multitool)  # create some data the_data <-   data.frame(     id  = 1:500,     iv1 = rnorm(500),     iv2 = rnorm(500),     iv3 = rnorm(500),     mod = rnorm(500),     dv1 = rnorm(500),     dv2 = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # create a pipeline blueprint full_pipeline <-   the_data |>   add_filters(include1 == 0, include2 != 3, include3 > -2.5) |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>   add_variables(var_group = \"dvs\", dv1, dv2) |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  detect_n_models(full_pipeline) #> [1] 1"},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect total number of variable sets in your pipelines — detect_n_variables","title":"Detect total number of variable sets in your pipelines — detect_n_variables","text":"Detect total number variable sets pipelines","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect total number of variable sets in your pipelines — detect_n_variables","text":"","code":"detect_n_variables(.pipeline)"},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect total number of variable sets in your pipelines — detect_n_variables","text":".pipeline data.frame produced calling series add_* functions.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect total number of variable sets in your pipelines — detect_n_variables","text":"numeric, total number unique variable sets","code":""},{"path":"https://ethan-young.github.io/multitool/reference/detect_n_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect total number of variable sets in your pipelines — detect_n_variables","text":"","code":"library(tidyverse) library(multitool)  # create some data the_data <-   data.frame(     id  = 1:500,     iv1 = rnorm(500),     iv2 = rnorm(500),     iv3 = rnorm(500),     mod = rnorm(500),     dv1 = rnorm(500),     dv2 = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # create a pipeline blueprint full_pipeline <-   the_data |>   add_filters(include1 == 0, include2 != 3, include3 > -2.5) |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>   add_variables(var_group = \"dvs\", dv1, dv2) |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  detect_n_variables(full_pipeline) #> [1] 6"},{"path":"https://ethan-young.github.io/multitool/reference/expand_decisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","title":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","text":"Expand set multiverse decisions possible combinations","code":""},{"path":"https://ethan-young.github.io/multitool/reference/expand_decisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","text":"","code":"expand_decisions(.pipeline)"},{"path":"https://ethan-young.github.io/multitool/reference/expand_decisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","text":".pipeline data.frame produced calling series add_* functions.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/expand_decisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","text":"nested data.frame containing combinations arbitrary decisions multiverse analysis. Decision types become list columns matching type decisions called along pipeline (e.g., filters, variables, etc.). decisions containing glue syntax populated relevant information.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/expand_decisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand a set of multiverse decisions into all possible combinations — expand_decisions","text":"","code":"library(tidyverse) library(multitool)  the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  full_pipeline <-   the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2, include3 > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_preprocess(process_name = \"scale_iv\", 'mutate({ivs} = scale({ivs}))') |>   add_preprocess(process_name = \"scale_mod\", mutate({mods} := scale({mods}))) |>   add_summary_stats(\"iv_stats\", starts_with(\"iv\"), c(\"mean\", \"sd\")) |>   add_summary_stats(\"dv_stats\", starts_with(\"dv\"), c(\"skewness\", \"kurtosis\")) |>   add_correlations(\"predictors\", matches(\"iv|mod|cov\"), focus_set = c(cov1,cov2)) |>   add_correlations(\"outcomes\", matches(\"dv|mod\"), focus_set = matches(\"dv\")) |>   add_reliabilities(\"unp_scale\", c(iv1,iv2,iv3)) |>   add_model(\"no covariates\", lm({dvs} ~ {ivs} * {mods})) |>   add_model(\"with covariates\", lm({dvs} ~ {ivs} * {mods} + cov1)) |>   add_postprocess(\"aov\", aov())  pipeline_expanded <- expand_decisions(full_pipeline)"},{"path":"https://ethan-young.github.io/multitool/reference/multitool-package.html","id":null,"dir":"Reference","previous_headings":"","what":"multitool: Tools for Running Multiverse Style Analyses — multitool-package","title":"multitool: Tools for Running Multiverse Style Analyses — multitool-package","text":"Run analysis range arbitrary data processing decisions. 'multitool' provides interface creating alternative analysis pipelines turning grid possible pipelines. Using grid blueprint, can model data possible analysis pipelines summarize results.","code":""},{"path":[]},{"path":"https://ethan-young.github.io/multitool/reference/multitool-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"multitool: Tools for Running Multiverse Style Analyses — multitool-package","text":"Maintainer: Ethan Young young.ethan.scott@gmail.com (ORCID) [copyright holder] Authors: Stefan Vermeent p.c.s.vermeent@gmail.com (ORCID)","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal.html","id":null,"dir":"Reference","previous_headings":"","what":"Reveal the contents of a multiverse analysis — reveal","title":"Reveal the contents of a multiverse analysis — reveal","text":"Reveal contents multiverse analysis","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reveal the contents of a multiverse analysis — reveal","text":"","code":"reveal(.multi, .what, .which = NULL, .unpack_specs = \"no\")"},{"path":"https://ethan-young.github.io/multitool/reference/reveal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reveal the contents of a multiverse analysis — reveal","text":".multi multiverse list-column tibble produced run_multiverse. .name list-column like unpack .sub-list columns like unpack .unpack_specs character, options \"\", \"wide\", \"long\". \"\" (default) keeps specifications list column, wide unnests specifications specification category column. \"long\" unnests specifications stacks long format, stacks specifications decision_set alternatives columns. mainly useful plotting.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reveal the contents of a multiverse analysis — reveal","text":"unnested part multiverse requested. usually contains particular estimates statistics like analyze decision grid specified.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reveal the contents of a multiverse analysis — reveal","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # Decision pipeline full_pipeline <-   the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_model(\"linear_model\", lm({dvs} ~ {ivs} * {mods} + cov1))  pipeline_grid <- expand_decisions(full_pipeline)  # Run the whole multiverse the_multiverse <- run_multiverse(pipeline_grid[1:10,]) #> Error in purrr::map(seq_len(nrow(.grid)), .progress = show_progress, function(x) {    multi_results <- list()    if (\"models\" %in% names(.grid)) {        multi_results$models <- run_universe_model(.grid = .grid,             decision_num = .grid$decision[x], save_model = save_model)    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: model. #> Caused by error: #> ! object 'the_data' not found  # Reveal results of the linear model the_multiverse |> reveal(model_fitted, model_parameters) #> Error in eval(expr, envir, enclos): object 'the_multiverse' not found"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_corrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Reveal a set of multiverse correlations — reveal_corrs","title":"Reveal a set of multiverse correlations — reveal_corrs","text":"Reveal set multiverse correlations","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_corrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reveal a set of multiverse correlations — reveal_corrs","text":"","code":"reveal_corrs(.descriptives, .which, .unpack_specs = \"no\")"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_corrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reveal a set of multiverse correlations — reveal_corrs","text":".descriptives descriptive multiverse list-column tibble produced run_descriptives. .specific name correlations requested .unpack_specs character, options \"\", \"wide\", \"long\". \"\" (default) keeps specifications list column, wide unnests specifications specification category column. \"long\" unnests specifications stacks long format, stacks specifications decision_set alternatives columns. mainly useful plotting.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_corrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reveal a set of multiverse correlations — reveal_corrs","text":"unnested set correlations per decision multiverse.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_corrs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reveal a set of multiverse correlations — reveal_corrs","text":"","code":"library(tidyverse) library(multitool)  # create some data the_data <-   data.frame(     id  = 1:500,     iv1 = rnorm(500),     iv2 = rnorm(500),     iv3 = rnorm(500),     mod = rnorm(500),     dv1 = rnorm(500),     dv2 = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # create a pipeline blueprint full_pipeline <-   the_data |>   add_filters(     include1 == 0,     include2 != 3,     include2 != 2,     include3 > -2.5,     include3 < 2.5,     between(include3, -2.5, 2.5)   ) |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>   add_variables(var_group = \"dvs\", dv1, dv2) |>   add_correlations(\"predictors\", starts_with(\"iv\")) |>   add_summary_stats(\"iv_stats\", starts_with(\"iv\"), c(\"mean\", \"sd\")) |>   add_reliabilities(\"vio_scale\", starts_with(\"iv\")) |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  my_descriptives <- run_descriptives(full_pipeline) #> Error in purrr::map(seq_len(nrow(filter_grid)), .progress = TRUE, function(x) {    multi_results <- list()    if (\"corrs\" %in% names(filter_grid)) {        multi_results$corrs <- run_universe_corrs(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    if (\"summary_stats\" %in% names(filter_grid)) {        multi_results$stats <- run_universe_summary_stats(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    if (\"reliabilities\" %in% names(filter_grid)) {        multi_results$reliabilities <- run_universe_reliabilities(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: predictors_rs. #> Caused by error: #> ! object 'the_data' not found  my_descriptives |>   reveal_corrs(predictors_rs) #> Error in eval(expr, envir, enclos): object 'my_descriptives' not found"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_messages.html","id":null,"dir":"Reference","previous_headings":"","what":"Reveal any messages about your models during a multiverse analysis — reveal_model_messages","title":"Reveal any messages about your models during a multiverse analysis — reveal_model_messages","text":"Reveal messages models multiverse analysis","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_messages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reveal any messages about your models during a multiverse analysis — reveal_model_messages","text":"","code":"reveal_model_messages(.multi, .unpack_specs = \"no\")"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_messages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reveal any messages about your models during a multiverse analysis — reveal_model_messages","text":".multi multiverse list-column tibble produced run_multiverse. .unpack_specs character, options \"\", \"wide\", \"long\". \"\" (default) keeps specifications list column, wide unnests specifications specification category column. \"long\" unnests specifications stacks long format, stacks specifications decision_set alternatives columns. mainly useful plotting.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_messages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reveal any messages about your models during a multiverse analysis — reveal_model_messages","text":"unnested model messages captured analysis.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_messages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reveal any messages about your models during a multiverse analysis — reveal_model_messages","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # Decision pipeline full_pipeline <-   the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_model(\"linear_model\", lm({dvs} ~ {ivs} * {mods} + cov1))  pipeline_grid <- expand_decisions(full_pipeline)  # Run the whole multiverse the_multiverse <- run_multiverse(pipeline_grid[1:10,]) #> Error in purrr::map(seq_len(nrow(.grid)), .progress = show_progress, function(x) {    multi_results <- list()    if (\"models\" %in% names(.grid)) {        multi_results$models <- run_universe_model(.grid = .grid,             decision_num = .grid$decision[x], save_model = save_model)    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: model. #> Caused by error: #> ! object 'the_data' not found  # Reveal results of the linear model the_multiverse |>   reveal_model_messages() #> Error in eval(expr, envir, enclos): object 'the_multiverse' not found"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Reveal the model parameters of a multiverse analysis — reveal_model_parameters","title":"Reveal the model parameters of a multiverse analysis — reveal_model_parameters","text":"Reveal model parameters multiverse analysis","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reveal the model parameters of a multiverse analysis — reveal_model_parameters","text":"","code":"reveal_model_parameters(.multi, parameter_key = NULL, .unpack_specs = \"no\")"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reveal the model parameters of a multiverse analysis — reveal_model_parameters","text":".multi multiverse list-column tibble produced run_multiverse. parameter_key character, added parameter keys pipeline, can specify like filter parameters using one parameter keys. useful different variables switched across multiverse represent effect interest. .unpack_specs character, options \"\", \"wide\", \"long\". \"\" (default) keeps specifications list column, wide unnests specifications specification category column. \"long\" unnests specifications stacks long format, stacks specifications decision_set alternatives columns. mainly useful plotting.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reveal the model parameters of a multiverse analysis — reveal_model_parameters","text":"unnested model paramerters multiverse.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reveal the model parameters of a multiverse analysis — reveal_model_parameters","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # Decision pipeline full_pipeline <-   the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_model(\"linear_model\", lm({dvs} ~ {ivs} * {mods} + cov1))  pipeline_grid <- expand_decisions(full_pipeline)  # Run the whole multiverse the_multiverse <- run_multiverse(pipeline_grid[1:10,]) #> Error in purrr::map(seq_len(nrow(.grid)), .progress = show_progress, function(x) {    multi_results <- list()    if (\"models\" %in% names(.grid)) {        multi_results$models <- run_universe_model(.grid = .grid,             decision_num = .grid$decision[x], save_model = save_model)    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: model. #> Caused by error: #> ! object 'the_data' not found  # Reveal results of the linear model the_multiverse |>   reveal_model_parameters() #> Error in eval(expr, envir, enclos): object 'the_multiverse' not found"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Reveal the model performance/fit indices from a multiverse analysis — reveal_model_performance","title":"Reveal the model performance/fit indices from a multiverse analysis — reveal_model_performance","text":"Reveal model performance/fit indices multiverse analysis","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reveal the model performance/fit indices from a multiverse analysis — reveal_model_performance","text":"","code":"reveal_model_performance(.multi, .unpack_specs = \"no\")"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reveal the model performance/fit indices from a multiverse analysis — reveal_model_performance","text":".multi multiverse list-column tibble produced run_multiverse. .unpack_specs character, options \"\", \"wide\", \"long\". \"\" (default) keeps specifications list column, wide unnests specifications specification category column. \"long\" unnests specifications stacks long format, stacks specifications decision_set alternatives columns. mainly useful plotting.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reveal the model performance/fit indices from a multiverse analysis — reveal_model_performance","text":"unnested model performance/fit indices multiverse analysis.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reveal the model performance/fit indices from a multiverse analysis — reveal_model_performance","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # Decision pipeline full_pipeline <-   the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_model(\"linear_model\", lm({dvs} ~ {ivs} * {mods} + cov1))  pipeline_grid <- expand_decisions(full_pipeline)  # Run the whole multiverse the_multiverse <- run_multiverse(pipeline_grid[1:10,]) #> Error in purrr::map(seq_len(nrow(.grid)), .progress = show_progress, function(x) {    multi_results <- list()    if (\"models\" %in% names(.grid)) {        multi_results$models <- run_universe_model(.grid = .grid,             decision_num = .grid$decision[x], save_model = save_model)    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: model. #> Caused by error: #> ! object 'the_data' not found  # Reveal results of the linear model the_multiverse |>   reveal_model_performance() #> Error in eval(expr, envir, enclos): object 'the_multiverse' not found"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_warnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Reveal any warnings about your models during a multiverse analysis — reveal_model_warnings","title":"Reveal any warnings about your models during a multiverse analysis — reveal_model_warnings","text":"Reveal warnings models multiverse analysis","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_warnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reveal any warnings about your models during a multiverse analysis — reveal_model_warnings","text":"","code":"reveal_model_warnings(.multi, .unpack_specs = \"no\")"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_warnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reveal any warnings about your models during a multiverse analysis — reveal_model_warnings","text":".multi multiverse list-column tibble produced run_multiverse. .unpack_specs character, options \"\", \"wide\", \"long\". \"\" (default) keeps specifications list column, wide unnests specifications specification category column. \"long\" unnests specifications stacks long format, stacks specifications decision_set alternatives columns. mainly useful plotting.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_warnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reveal any warnings about your models during a multiverse analysis — reveal_model_warnings","text":"unnested model warnings captured analysis","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_model_warnings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reveal any warnings about your models during a multiverse analysis — reveal_model_warnings","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # Decision pipeline full_pipeline <-   the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_model(\"linear_model\", lm({dvs} ~ {ivs} * {mods} + cov1))  pipeline_grid <- expand_decisions(full_pipeline)  # Run the whole multiverse the_multiverse <- run_multiverse(pipeline_grid[1:10,]) #> Error in purrr::map(seq_len(nrow(.grid)), .progress = show_progress, function(x) {    multi_results <- list()    if (\"models\" %in% names(.grid)) {        multi_results$models <- run_universe_model(.grid = .grid,             decision_num = .grid$decision[x], save_model = save_model)    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: model. #> Caused by error: #> ! object 'the_data' not found  # Reveal results of the linear model the_multiverse |>   reveal_model_warnings() #> Error in eval(expr, envir, enclos): object 'the_multiverse' not found"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_reliabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Reveal a set of multiverse cronbach's alpha statistics — reveal_reliabilities","title":"Reveal a set of multiverse cronbach's alpha statistics — reveal_reliabilities","text":"Reveal set multiverse cronbach's alpha statistics","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_reliabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reveal a set of multiverse cronbach's alpha statistics — reveal_reliabilities","text":"","code":"reveal_reliabilities(.descriptives, .which, .unpack_specs = \"no\")"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_reliabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reveal a set of multiverse cronbach's alpha statistics — reveal_reliabilities","text":".descriptives descriptive multiverse list-column tibble produced run_descriptives. .specific name alphas .unpack_specs character, options \"\", \"wide\", \"long\". \"\" (default) keeps specifications list column, wide unnests specifications specification category column. \"long\" unnests specifications stacks long format, stacks specifications decision_set alternatives columns. mainly useful plotting.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_reliabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reveal a set of multiverse cronbach's alpha statistics — reveal_reliabilities","text":"unnested set correlations per decision multiverse.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_reliabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reveal a set of multiverse cronbach's alpha statistics — reveal_reliabilities","text":"","code":"library(tidyverse) library(multitool)  # create some data the_data <-   data.frame(     id  = 1:500,     iv1 = rnorm(500),     iv2 = rnorm(500),     iv3 = rnorm(500),     mod = rnorm(500),     dv1 = rnorm(500),     dv2 = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # create a pipeline blueprint full_pipeline <-   the_data |>   add_filters(     include1 == 0,     include2 != 3,     include2 != 2,     include3 > -2.5,     include3 < 2.5,     between(include3, -2.5, 2.5)   ) |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>   add_variables(var_group = \"dvs\", dv1, dv2) |>   add_correlations(\"predictor correlations\", starts_with(\"iv\")) |>   add_summary_stats(\"iv_stats\", starts_with(\"iv\"), c(\"mean\", \"sd\")) |>   add_reliabilities(\"vio_scale\", starts_with(\"iv\")) |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  my_descriptives <- run_descriptives(full_pipeline) #> Error in purrr::map(seq_len(nrow(filter_grid)), .progress = TRUE, function(x) {    multi_results <- list()    if (\"corrs\" %in% names(filter_grid)) {        multi_results$corrs <- run_universe_corrs(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    if (\"summary_stats\" %in% names(filter_grid)) {        multi_results$stats <- run_universe_summary_stats(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    if (\"reliabilities\" %in% names(filter_grid)) {        multi_results$reliabilities <- run_universe_reliabilities(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: predictor_correlations_rs. #> Caused by error: #> ! object 'the_data' not found  my_descriptives |>   reveal_reliabilities(vio_scale_alpha) #> Error in eval(expr, envir, enclos): object 'my_descriptives' not found"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_summary_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Reveal a set of summary statistics from a multiverse analysis — reveal_summary_stats","title":"Reveal a set of summary statistics from a multiverse analysis — reveal_summary_stats","text":"Reveal set summary statistics multiverse analysis","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_summary_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reveal a set of summary statistics from a multiverse analysis — reveal_summary_stats","text":"","code":"reveal_summary_stats(.descriptives, .which, .unpack_specs = \"no\")"},{"path":"https://ethan-young.github.io/multitool/reference/reveal_summary_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reveal a set of summary statistics from a multiverse analysis — reveal_summary_stats","text":".descriptives descriptive multiverse list-column tibble produced run_descriptives. .specific name summary statistics .unpack_specs character, options \"\", \"wide\", \"long\". \"\" (default) keeps specifications list column, wide unnests specifications specification category column. \"long\" unnests specifications stacks long format, stacks specifications decision_set alternatives columns. mainly useful plotting.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_summary_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reveal a set of summary statistics from a multiverse analysis — reveal_summary_stats","text":"unnested set summary statistics per decision multiverse.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/reveal_summary_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reveal a set of summary statistics from a multiverse analysis — reveal_summary_stats","text":"","code":"library(tidyverse) library(multitool)  # create some data the_data <-   data.frame(     id  = 1:500,     iv1 = rnorm(500),     iv2 = rnorm(500),     iv3 = rnorm(500),     mod = rnorm(500),     dv1 = rnorm(500),     dv2 = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # create a pipeline blueprint full_pipeline <-   the_data |>   add_filters(     include1 == 0,     include2 != 3,     include2 != 2,     include3 > -2.5,     include3 < 2.5,     between(include3, -2.5, 2.5)   ) |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>   add_variables(var_group = \"dvs\", dv1, dv2) |>   add_correlations(\"predictor correlations\", starts_with(\"iv\")) |>   add_summary_stats(\"iv_stats\", starts_with(\"iv\"), c(\"mean\", \"sd\")) |>   add_reliabilities(\"vio_scale\", starts_with(\"iv\")) |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  my_descriptives <- run_descriptives(full_pipeline) #> Error in purrr::map(seq_len(nrow(filter_grid)), .progress = TRUE, function(x) {    multi_results <- list()    if (\"corrs\" %in% names(filter_grid)) {        multi_results$corrs <- run_universe_corrs(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    if (\"summary_stats\" %in% names(filter_grid)) {        multi_results$stats <- run_universe_summary_stats(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    if (\"reliabilities\" %in% names(filter_grid)) {        multi_results$reliabilities <- run_universe_reliabilities(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: predictor_correlations_rs. #> Caused by error: #> ! object 'the_data' not found  my_descriptives |>   reveal_summary_stats(iv_stats) #> Error in eval(expr, envir, enclos): object 'my_descriptives' not found"},{"path":"https://ethan-young.github.io/multitool/reference/run_descriptives.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a multiverse-style descriptive analysis based on a complete decision grid — run_descriptives","title":"Run a multiverse-style descriptive analysis based on a complete decision grid — run_descriptives","text":"Run multiverse-style descriptive analysis based complete decision grid","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_descriptives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a multiverse-style descriptive analysis based on a complete decision grid — run_descriptives","text":"","code":"run_descriptives(.pipeline, show_progress = TRUE)"},{"path":"https://ethan-young.github.io/multitool/reference/run_descriptives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a multiverse-style descriptive analysis based on a complete decision grid — run_descriptives","text":".pipeline tibble produced series add_* calls. Importantly, needs pre-expanded pipeline descriptive analyses change underlying cases change. Thus, filtering decisions used internally expanded calculating various descriptive analyses. show_progress logical, whether show progress bar running.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_descriptives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a multiverse-style descriptive analysis based on a complete decision grid — run_descriptives","text":"single tibble containing tidied results descriptive analyses specified","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_descriptives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a multiverse-style descriptive analysis based on a complete decision grid — run_descriptives","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # Decision pipeline full_pipeline <-   the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_summary_stats(\"iv_stats\", starts_with(\"iv\"), c(\"mean\", \"sd\")) |>   add_summary_stats(\"dv_stats\", starts_with(\"dv\"), c(\"skewness\", \"kurtosis\")) |>   add_correlations(\"predictors\", matches(\"iv|mod|cov\"), focus_set = c(cov1,cov2)) |>   add_correlations(\"outcomes\", matches(\"dv|mod\"), focus_set = matches(\"dv\")) |>   add_reliabilities(\"unp_scale\", c(iv1,iv2,iv3)) |>   add_reliabilities(\"vio_scale\", starts_with(\"mod\"))  run_descriptives(full_pipeline) #> Error in purrr::map(seq_len(nrow(filter_grid)), .progress = TRUE, function(x) {    multi_results <- list()    if (\"corrs\" %in% names(filter_grid)) {        multi_results$corrs <- run_universe_corrs(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    if (\"summary_stats\" %in% names(filter_grid)) {        multi_results$stats <- run_universe_summary_stats(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    if (\"reliabilities\" %in% names(filter_grid)) {        multi_results$reliabilities <- run_universe_reliabilities(.grid = filter_grid,             decision_num = filter_grid$decision[x])    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: predictors_rs. #> Caused by error: #> ! object 'the_data' not found"},{"path":"https://ethan-young.github.io/multitool/reference/run_multiverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a multiverse based on a complete decision grid — run_multiverse","title":"Run a multiverse based on a complete decision grid — run_multiverse","text":"Run multiverse based complete decision grid","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_multiverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a multiverse based on a complete decision grid — run_multiverse","text":"","code":"run_multiverse(.grid, ncores = 1, save_model = FALSE, show_progress = TRUE)"},{"path":"https://ethan-young.github.io/multitool/reference/run_multiverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a multiverse based on a complete decision grid — run_multiverse","text":".grid tibble produced expand_decisions ncores numeric. number cores want use parallel processing. save_model logical, indicates whether save model object entirety. default FALSE model objects usually large hood, parameters performance used summarize useful model information. show_progress logical, whether show progress bar running.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_multiverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a multiverse based on a complete decision grid — run_multiverse","text":"single tibble containing tidied results model post-processing tests/tasks. unique test (e.g., lm aov called lm), list column function name created parameters performance warnings messages printed fitting models. Internally, modeling post-processing functions checked see tidy glance methods available. , summary called instead.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/run_multiverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a multiverse based on a complete decision grid — run_multiverse","text":"","code":"library(tidyverse) library(multitool)  # Simulate some data the_data <-   data.frame(     id   = 1:500,     iv1  = rnorm(500),     iv2  = rnorm(500),     iv3  = rnorm(500),     mod1 = rnorm(500),     mod2 = rnorm(500),     mod3 = rnorm(500),     cov1 = rnorm(500),     cov2 = rnorm(500),     dv1  = rnorm(500),     dv2  = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # Decision pipeline full_pipeline <-   the_data |>   add_filters(include1 == 0,include2 != 3,include2 != 2,scale(include3) > -2.5) |>   add_variables(\"ivs\", iv1, iv2, iv3) |>   add_variables(\"dvs\", dv1, dv2) |>   add_variables(\"mods\", starts_with(\"mod\")) |>   add_preprocess(process_name = \"scale_iv\", 'mutate({ivs} = scale({ivs}))') |>   add_preprocess(process_name = \"scale_mod\", mutate({mods} := scale({mods}))) |>   add_model(\"no covariates\",lm({dvs} ~ {ivs} * {mods})) |>   add_model(\"covariate\", lm({dvs} ~ {ivs} * {mods} + cov1)) |>   add_postprocess(\"aov\", aov())  pipeline_grid <- expand_decisions(full_pipeline)  # Run the whole multiverse the_multiverse <- run_multiverse(pipeline_grid[1:10,]) #> Error in purrr::map(seq_len(nrow(.grid)), .progress = show_progress, function(x) {    multi_results <- list()    if (\"models\" %in% names(.grid)) {        multi_results$models <- run_universe_model(.grid = .grid,             decision_num = .grid$decision[x], save_model = save_model)    }    purrr::reduce(multi_results, dplyr::left_join, by = \"decision\")}): ℹ In index: 1. #> Caused by error in `map2()`: #> ℹ In index: 1. #> ℹ With name: model. #> Caused by error: #> ! object 'the_data' not found"},{"path":"https://ethan-young.github.io/multitool/reference/show_code_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Show multiverse data code pipelines — show_code_filter","title":"Show multiverse data code pipelines — show_code_filter","text":"show_code* function self-explanatory - indicate along multiverse pipeline extract code. goal functions create window multiverse decision set context/results allow user inspect specific decisions straight code produced .","code":""},{"path":"https://ethan-young.github.io/multitool/reference/show_code_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show multiverse data code pipelines — show_code_filter","text":"","code":"show_code_filter(.grid, decision_num, copy = F)  show_code_preprocess(.grid, decision_num, copy = F)  show_code_model(.grid, decision_num, copy = F)  show_code_postprocess(.grid, decision_num, copy = F)  show_code_summary_stats(.grid, decision_num, copy = F)  show_code_corrs(.grid, decision_num, copy = F)  show_code_reliabilities(.grid, decision_num, copy = F)"},{"path":"https://ethan-young.github.io/multitool/reference/show_code_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show multiverse data code pipelines — show_code_filter","text":".grid full decision grid created expand_decisions decision_num numeric. Indicates 'universe' multiverse show underlying code. copy logical. Whether copy pipeline code clipboard using write_clip.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/show_code_filter.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Show multiverse data code pipelines — show_code_filter","text":"show_code_preprocess(): Show code preprocessing stage show_code_model(): Show code modeling stage show_code_postprocess(): Show code post-processing stage show_code_summary_stats(): Show code computing summary statistics show_code_corrs(): Show code computing correlations show_code_reliabilities(): Show code computing scale reliability","code":""},{"path":"https://ethan-young.github.io/multitool/reference/summarize_filter_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize samples sizes for each unique filtering expression — summarize_filter_ns","title":"Summarize samples sizes for each unique filtering expression — summarize_filter_ns","text":"Summarize samples sizes unique filtering expression","code":""},{"path":"https://ethan-young.github.io/multitool/reference/summarize_filter_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize samples sizes for each unique filtering expression — summarize_filter_ns","text":"","code":"summarize_filter_ns(.pipeline)"},{"path":"https://ethan-young.github.io/multitool/reference/summarize_filter_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize samples sizes for each unique filtering expression — summarize_filter_ns","text":".pipeline data.frame produced calling series add_* functions.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/summarize_filter_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize samples sizes for each unique filtering expression — summarize_filter_ns","text":"tibble row representing filtering expression four columns: filter_expression, variable, n_retained, n_excluded.","code":""},{"path":"https://ethan-young.github.io/multitool/reference/summarize_filter_ns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize samples sizes for each unique filtering expression — summarize_filter_ns","text":"","code":"library(tidyverse) library(multitool)  # create some data the_data <-   data.frame(     id  = 1:500,     iv1 = rnorm(500),     iv2 = rnorm(500),     iv3 = rnorm(500),     mod = rnorm(500),     dv1 = rnorm(500),     dv2 = rnorm(500),     include1 = rbinom(500, size = 1, prob = .1),     include2 = sample(1:3, size = 500, replace = TRUE),     include3 = rnorm(500)   )  # create a pipeline blueprint full_pipeline <-   the_data |>   add_filters(include1 == 0, include2 != 3, include3 > -2.5) |>   add_variables(var_group = \"ivs\", iv1, iv2, iv3) |>   add_variables(var_group = \"dvs\", dv1, dv2) |>   add_model(\"linear model\", lm({dvs} ~ {ivs} * mod))  summarize_filter_ns(full_pipeline) #> # A tibble: 6 × 4 #>   filter_expression              variable n_retained n_excluded #>   <chr>                          <chr>         <int>      <int> #> 1 include1 == 0                  include1        439         61 #> 2 include1 %in% unique(include1) include1        500          0 #> 3 include2 != 3                  include2        344        156 #> 4 include2 %in% unique(include2) include2        500          0 #> 5 include3 > -2.5                include3        498          2 #> 6 include3 %in% unique(include3) include3        500          0"},{"path":"https://ethan-young.github.io/multitool/news/index.html","id":"multitool-010","dir":"Changelog","previous_headings":"","what":"multitool 0.1.0","title":"multitool 0.1.0","text":"First fully functional (pre-CRAN) version","code":""}]
